syntax = "proto3";
package trader_accounts;
import "google/protobuf/empty.proto";
import "MetatraderBroker.proto";
import "MetatraderPlatform.proto";
import "TraderPackagesGrpcService.proto";


message TraderAccount {
    string Id = 1;
    string Title = 2;
    int32 Phase = 3;
    TradingPlatformModel TradingPlatformModel = 4;
    double Balance = 5;
    optional int64 StartDate = 6;
    optional int64 EndDate = 7;
    string ClientId = 8;
    string AggregatedId = 9;
    int64 CreatedAt = 10;
    int64 UpdatedAt = 11;
    TraderAccountStatusModel Status = 12;
    double InitialBalance = 13;
    string InitialBalanceCurrency = 14;
    double OverallDrawdown = 15;
    double DailyDrawdown = 16;
    double TargetProfit = 17;
    int32 MinTradedDays = 18;
    string Brand = 19;
    TraderAccountTypeModel Type = 20;
    string OrderId = 21;
}

message TraderPlatformCredentials {
  BrokerModel Broker = 1;

  TradingPlatformModel TradingPlatform = 2;

  string Windows = 3;

  string Mac = 4;

  string Ios = 5;

  string Android = 6;

  string Web = 7;
}

enum TraderAccountTypeModel {
  DEMO = 0;
  LIVE = 1;
}

enum TraderAccountStatusModel {
  NEW = 0;
  ACTIVE = 1;
  DIABLED = 2;
  STAGE_COMPLETED = 3;
}

message GetByClientIdRequest{
  string ClientId = 1;
}

message GetByClientIdResponse{
  repeated TraderAccount Items = 1;
}

message CreateTraderAccountRequest {
    string TradingPackageId = 1;
    TradingPlatformModel TradingPlatform = 2;
    BrokerModel BrokerModel = 3;
    // NOT USED
    //string FirstName = 4;
    //string LastName = 5;
    //string City = 6;
    //string Country = 7;
    //string ZipCode = 8;
    //string Address = 9;
    //string Phone = 10;
    //optional string DiscountCode = 11;
    string ClientId = 12;
    string ProcessId = 13;
    string OrderId = 14;
    string Brand = 15;
}

message CreateTraderAccountResponse{
  string OrderId = 1;
}

message GetTraderAccountCredentialsRequest {
  string ClientId = 1;
  string AccountId = 2;
}

message GetTraderAccountCredentialsResponse {
  oneof response {
    GetTraderAccountCredentialsResponseBody Body = 1;
    TraderAccountError Error = 2;
  }
}

message GetTraderAccountCredentialsResponseBody {
  string ClientId = 1;
  string AccountId = 2;
  string TradePassword = 3;      
  string ViewPassword = 4; 
  int64 Login = 5;
  string Server = 6;
}

message GetTraderAccIdByCredentialsLoginRequest {
  repeated int64 Logins = 1;
  TradingPlatformModel TradingPlatform = 2;
  BrokerModel Broker = 3;
}

message GetTraderAccIdByCredentialsLoginResponse {
  repeated trader_accounts.LoginTradAccId LoginTradAccIds = 1;
}

message LoginTradAccId {
  int64 Login = 1;
  string TraderAccId = 2;
}

message GetLoginByTraderAccIdRequest {
  repeated string TraderAccId = 1;
  TradingPlatformModel TradingPlatform = 2;
  BrokerModel Broker = 3;
}

message GetLoginByTraderAccIdResponse {
  repeated LoginTradAccId LoginTradAccIds = 1;
}

message GetTraderAccountByIdRequest {
  string TraderAccId = 1;
}

message GetTraderAccountByIdResponse {
  oneof response {
    GetTraderAccountByIdResponseBody Body = 1;
    TraderAccountError Error = 2;
  }
}

message GetTraderAccountByIdResponseBody {
  TraderAccount TraderAccount = 1;
}

message GetTraderAccountConditionsByIdRequest {
  string TraderAccId = 1;
}

message GetTraderAccountConditionsByIdResponse {
  oneof response {
    GetTraderAccountConditionsByIdResponseBody Body = 1;
    TraderAccountError Error = 2;
  }
}

message GetTraderAccountConditionsByIdResponseBody {
  TraderPackage TraderPackage = 1;
}

message GetTraderPlatformCredentialsRequest {
}

message GetTraderPlatformCredentialsResponse {
  repeated TraderPlatformCredentials TraderPlatformCredentials = 1;
}

message UpsertTraderPlatformCredentialsRequest {
  TraderPlatformCredentials TraderPlatformCredentials = 1;
}

message UpsertTraderPlatformCredentialsResponse {
}

enum TraderAccountError {
  OK = 0;
  NO_ACCOUNT = 1;
  NO_TRADING_PACKAGE = 2;
  UNAUTHORIZED = 3;
  NO_PERSONAL_DATA = 4;
  TRADER_ACCOUNT_WRONG_STATUS = 5;
}


service TraderAccountsGrpcService {
    rpc GetByClientId(GetByClientIdRequest) 
    returns (GetByClientIdResponse);
    rpc GetTraderAccIdByCredentialsLogin(GetTraderAccIdByCredentialsLoginRequest) 
    returns (GetTraderAccIdByCredentialsLoginResponse);
    rpc GetLoginByTraderAccId(GetLoginByTraderAccIdRequest) 
    returns (GetLoginByTraderAccIdResponse);
    rpc CreateTraderAccount(CreateTraderAccountRequest) 
    returns (CreateTraderAccountResponse);
    rpc GetTraderAccountCredentials(GetTraderAccountCredentialsRequest) 
    returns (GetTraderAccountCredentialsResponse);
    rpc GetTraderAccountById(GetTraderAccountByIdRequest) 
    returns (GetTraderAccountByIdResponse);
    rpc GetTraderAccountConditionsById(GetTraderAccountConditionsByIdRequest) 
    returns (GetTraderAccountConditionsByIdResponse);
    rpc GetTraderPlatformCredentials(GetTraderPlatformCredentialsRequest) 
    returns (GetTraderPlatformCredentialsResponse);
    rpc UpsertTraderPlatformCredentials(UpsertTraderPlatformCredentialsRequest) 
    returns (UpsertTraderPlatformCredentialsResponse);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
