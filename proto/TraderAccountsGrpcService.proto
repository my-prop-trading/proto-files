syntax = "proto3";
package trader_accounts;
import "google/protobuf/empty.proto";
import "TraderPackagesGrpcService.proto";


message TraderAccount {
    string Id = 1;
    string Title = 2;
    int32 Phase = 3;
    int32 PlatformId = 4;
    double Balance = 5;
    optional int64 StartDate = 6;
    optional int64 EndDate = 7;
    string ClientId = 8;
    string AggregatedId = 9;
    int64 CreatedAt = 10;
    int64 UpdatedAt = 11;
    trader_accounts.TraderAccountStatusModel Status = 12;
    double InitialBalance = 13;
    string InitialBalanceCurrency = 14;
    double OverallDrawdown = 15;
    double DailyDrawdown = 16;
    double TargetProfit = 17;
    int32 MinTradedDays = 18;
    string Brand = 19;
    trader_accounts.TraderAccountTypeModel Type = 20;
    string OrderId = 21;
    string TraderPackageGroupId = 22;
    string TraderPackageGroupName = 23;
    trader_packages.TraderPackagePhaseType TraderPackagePhaseType = 24;

    double Phase1DailyDrawdown = 30;
    double Phase1OverallDrawdown = 31;
    double Phase1TargetProfit = 32;
    int32 Phase1Duration = 33;
    optional int32 Phase1MinTradingDays = 34;
    optional int32 Phase1MinOpenedPositions = 35;
    optional double Phase1RevenueShare = 36;
    double Phase1Refund = 37;

    double Phase2DailyDrawdown = 40;
    double Phase2OverallDrawdown = 41;
    double Phase2TargetProfit = 42;
    int32 Phase2Duration = 43;
    optional int32 Phase2MinTradingDays = 44;
    optional int32 Phase2MinOpenedPositions = 45;
    optional double Phase2RevenueShare = 46;
    double Phase2Refund = 47;

    double Phase3DailyDrawdown = 50;
    double Phase3OverallDrawdown = 51;
    double Phase3TargetProfit = 52;
    int32 Phase3Duration = 53;
    optional int32 Phase3MinTradingDays = 54;
    optional int32 Phase3MinOpenedPositions = 55;
    optional double Phase3RevenueShare = 56;
    double Phase3Refund = 57;

    double Refund = 58;
}

enum TraderAccountTypeModel {
  DEMO = 0;
  LIVE = 1;
}

enum TraderAccountStatusModel {
  NEW = 0;
  ACTIVE = 1;
  DISABLED = 2;
  STAGE_COMPLETED = 3;
  BLOCKED = 4;
}

enum BlockerType {
  NO_BLOCKER = 0;
  BLOCK_TRADES = 1;
  BLOCK_TRADES_AND_FUTURE = 2;
  BLOCK_TRADES_AND_FUTURE_AND_CURRENT = 4;
}

message GetByClientIdRequest{
  string ClientId = 1;
}

message GetByClientIdResponse{
  repeated trader_accounts.TraderAccount Items = 1;
}

message CreateTraderAccountRequest {
    string TradingPackageId = 1;
    int32 PlatformId = 2;
    // NOT USED
    //int32 AccountType = 3;
    //string FirstName = 4;
    //string LastName = 5;
    //string City = 6;
    //string Country = 7;
    //string ZipCode = 8;
    //string Address = 9;
    //string Phone = 10;
    //optional string DiscountCode = 11;
    string ClientId = 12;
    string ProcessId = 13;
    string OrderId = 14;
    string Brand = 15;

    trader_packages.TraderPackage TraderPackage = 16;
    double RealPrice = 17;
}

message CreateTraderAccountResponse{
  string OrderId = 1;
  string TraderAccId = 2; 
  string AggregateId = 3;
}

message GetTraderAccountCredentialsRequest {
  string ClientId = 1;
  string AccountId = 2;
}

message GetTraderAccountCredentialsResponse {
  oneof response {
    trader_accounts.GetTraderAccountCredentialsResponseBody Body = 1;
    trader_accounts.TraderAccountError Error = 2;
  }
}

message GetTraderAccountCredentialsResponseBody {
  string ClientId = 1;
  string AccountId = 2;
  string TradePassword = 3;      
  string ViewPassword = 4; 
  string Login = 5;
  string Server = 6;
  string PlatformAccountId = 7; 
  int32 CredentialType = 8;
}

message GetTraderAccIdByCredentialsLoginRequest {
  repeated string Logins = 1;
  int32 PlatformId = 2;
  int32 AccountType = 3;
}

message GetTraderAccIdByCredentialsLoginResponse {
  repeated trader_accounts.LoginTradAccId LoginTradAccIds = 1;
}

message LoginTradAccId {
  string Login = 1;
  string TraderAccId = 2;
  string ClientId = 3;
}

message GetLoginByTraderAccIdRequest {
  repeated string TraderAccId = 1;
  int32 PlatformId = 2;
  int32 AccountType = 3;
}

message GetLoginByTraderAccIdResponse {
  repeated trader_accounts.LoginTradAccId LoginTradAccIds = 1;
}

message GetTraderAccountByIdRequest {
  string TraderAccId = 1;
}

message GetTraderAccountByIdResponse {
  oneof response {
    trader_accounts.GetTraderAccountByIdResponseBody Body = 1;
    trader_accounts.TraderAccountError Error = 2;
  }
}

message GetTraderAccountByIdPrefixRequest {
  string TraderAccIdPrefix = 1;
}

message GetTraderAccountByIdPrefixResponse {
  repeated trader_accounts.TraderAccount Items = 1;
}

message GetTraderAccountByIdResponseBody {
  trader_accounts.TraderAccount TraderAccount = 1;
}

message GetTraderAccountConditionsByIdRequest {
  string TraderAccId = 1;
}

message GetTraderAccountConditionsByIdResponse {
  oneof response {
    trader_accounts.GetTraderAccountConditionsByIdResponseBody Body = 1;
    trader_accounts.TraderAccountError Error = 2;
  }
}

message GetTraderAccountsByAggregatedIRequest {
  string AggregatedId = 1;
}

message GetTraderAccountsByAggregatedIResponse {
  repeated trader_accounts.TraderAccount Items = 1;
}

message GetTraderAccountConditionsByIdResponseBody {
  trader_packages.TraderPackage TraderPackage = 1;
}

message BlockTraderAccountRequest {
  string TraderAccId = 1;
  trader_accounts.BlockerType BlockerType = 2;
  string OfficerId = 3;
}

message BlockTraderAccountResponse {
}

message UnBlockTraderAccountRequest {
  string TraderAccId = 1;
  string OfficerId = 2;
}

message UnBlockTraderAccountResponse {
}

enum TraderAccountError {
  OK = 0;
  NO_ACCOUNT = 1;
  NO_TRADING_PACKAGE = 2;
  UNAUTHORIZED = 3;
  NO_PERSONAL_DATA = 4;
  TRADER_ACCOUNT_WRONG_STATUS = 5;
}

message GetBlockedTraderAccountsRequest {
  string ClientId = 1;
}

message GetBlockedTraderAccountsResponse {
  repeated trader_accounts.GetBlockedTraderAccountsResponseBody Items = 1;
}

message GetBlockedTraderAccountsResponseBody {
  string TraderAccId = 1;
  trader_accounts.BlockerType BlockerType = 2;
}

service TraderAccountsGrpcService {
    rpc GetByClientId(trader_accounts.GetByClientIdRequest) returns (trader_accounts.GetByClientIdResponse);
    rpc GetTraderAccIdByCredentialsLogin(trader_accounts.GetTraderAccIdByCredentialsLoginRequest) returns (trader_accounts.GetTraderAccIdByCredentialsLoginResponse);
    rpc GetLoginByTraderAccId(trader_accounts.GetLoginByTraderAccIdRequest) returns (trader_accounts.GetLoginByTraderAccIdResponse);
    rpc CreateTraderAccount(trader_accounts.CreateTraderAccountRequest) returns (trader_accounts.CreateTraderAccountResponse);
    rpc GetTraderAccountCredentials(trader_accounts.GetTraderAccountCredentialsRequest) returns (trader_accounts.GetTraderAccountCredentialsResponse);
    rpc GetTraderAccountById(trader_accounts.GetTraderAccountByIdRequest) returns (trader_accounts.GetTraderAccountByIdResponse);
    rpc GetTraderAccountConditionsById(trader_accounts.GetTraderAccountConditionsByIdRequest) returns (trader_accounts.GetTraderAccountConditionsByIdResponse);

    rpc GetTraderAccountsByAggregatedId(trader_accounts.GetTraderAccountsByAggregatedIRequest) returns (trader_accounts.GetTraderAccountsByAggregatedIResponse);
    rpc GetTraderAccountByIdPrefix(trader_accounts.GetTraderAccountByIdPrefixRequest) returns (trader_accounts.GetTraderAccountByIdPrefixResponse);

    rpc GetBlockedTraderAccounts(trader_accounts.GetBlockedTraderAccountsRequest) returns (trader_accounts.GetBlockedTraderAccountsResponse);
    rpc BlockTraderAccount(trader_accounts.BlockTraderAccountRequest) returns (trader_accounts.BlockTraderAccountResponse);
    rpc UnBlockTraderAccount(trader_accounts.UnBlockTraderAccountRequest) returns (trader_accounts.UnBlockTraderAccountResponse);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
