syntax = "proto3";
import "google/protobuf/empty.proto";
package trading_control;

enum TradingObjectiveFailReasonGrpc {
    DAILY_LOSS_LEVEL = 0;
    OVERALL_LOSS_LEVEL = 1;
    TARGET_DATE = 2;
    LEGACY = 3;
    INACTIVITY = 4;
    NONE = 999;
}

message TradingMetricsGrpcModel {
  double average_win = 1;
  double average_loss = 2;
  double win_ratio = 3;
  double risk_ratio = 4;
  int32 traded_days_count = 5;
  double traded_days_percent = 6;
  double current_total_profit = 7;
  double profit_percent = 8;
  double max_daily_loss = 9;
  double max_daily_loss_recorded = 10;
  double max_daily_loss_percent = 11;
  double max_overall_loss_recorded = 12;
  double max_overall_loss_percent = 13;
  int32 min_trading_days_count = 14;
  double target_profit = 15;
  double max_overall_loss = 16;
  double overall_profit_percent = 17;
  double initial_balance = 18;
  double overall_loss_level = 19;
  double initial_balance_loss = 20;
  double current_equity = 21;
  double current_balance = 22;
  double initial_balance_loss_percent = 23;
  double daily_loss_level = 24;
  double daily_loss_percent = 25;
  double current_daily_loss = 26;
  double day_entry_equity = 27;
  string trader_account_id = 28;
  string client_id = 29;
  optional TradingObjectiveFailReasonGrpc objective_fail_reason = 30;
  double best_day_profit = 31;
  double best_day_ratio = 32;
}

message GetTradingMetricsGrpcRequest {
  string TraderAccountId = 1;
  string ClientId = 2;
}

message GetTradingMetricsGrpcResponse {
  TradingMetricsGrpcModel item = 1;
}

message FailTradingObjectiveGrpcRequest {
  string TraderAccountId = 1;
  TradingObjectiveFailReasonGrpc fail_reason = 2;
}

message FailTradingObjectiveGrpcResponse {
  bool is_success = 1;
  string message = 2;
}

message PassTradingObjectiveGrpcRequest {
  string TraderAccountId = 1;
}

message PassTradingObjectiveGrpcResponse {
  bool is_success = 1;
  string message = 2;
}

message AccountCandleGrpcModel {
  CandleInterval interval = 1;
  int64 date = 2;
  string trader_account_id = 3;
  AccountCandleDataGrpcModel balance_data = 4;
  AccountCandleDataGrpcModel equity_data = 5;
  AccountCandleDataGrpcModel pnl_data = 6;
}

message AccountCandleDataGrpcModel {
  double open = 1;
  double close = 2;
  double high = 3;
  double low = 4;
  double low_after_height = 5;

}

message GetAccountCandlesGrpcRequest {
  string TraderAccId = 1;
  int64 StartDate = 2;
  int64 EndDate = 3;
  optional CandleInterval Interval = 4;
}

message GetAccountCandlesGrpcResponse {
  repeated AccountCandleGrpcModel items = 1;
}

enum CandleInterval {
  Minute = 0;
  Hour = 1;
  Day = 2;
  Month = 3;
  ThreeMinutes = 4;
  FiveMinutes = 5;
  FifteenMinutes = 6;
  ThirtyMinutes = 7;
  TwoHours = 8;
  FourHours = 9;
  SixHours = 10;
  EightHours = 11;
  TwelveHours = 12;
  ThreeDays = 13;
  SevenDays = 14;
  Endless = 15;
}

message GetTotalNetProfitGrpcRequest {}

message GetTotalNetProfitGrpcResponse {
  double value = 1;
}

message TopTradingMetricsGrpcRequest {
  int32 limit = 1;
}

message TopTradingMetricsGrpcResponse {
  repeated TradingMetricsGrpcModel items = 1;
}

service TradingControlGrpcService {
  rpc GetTradingMetrics(GetTradingMetricsGrpcRequest) returns (GetTradingMetricsGrpcResponse);
  rpc FailTradingObjective(FailTradingObjectiveGrpcRequest) returns (FailTradingObjectiveGrpcResponse);
  rpc PassTradingObjective(PassTradingObjectiveGrpcRequest) returns (PassTradingObjectiveGrpcResponse);
  rpc GetAccountCandles(GetAccountCandlesGrpcRequest) returns (GetAccountCandlesGrpcResponse);
  rpc GetTotalNetProfit(GetTotalNetProfitGrpcRequest) returns (GetTotalNetProfitGrpcResponse);
  rpc TopTradingMetrics(TopTradingMetricsGrpcRequest) returns (TopTradingMetricsGrpcResponse);

  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
