syntax = "proto3";
package kyc;
import "google/protobuf/empty.proto";

enum KycError {
    OK = 0;
    INTERNAL_ERROR = 1;
    NO_TRADING_ACCOUNT = 2;
    NO_TRADING_PACKAGE = 3; 
    METATARDER_ERROR = 4; 
}

message ProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message ProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfIdentityResponse {
    oneof response {
        kyc.ProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfIdentityResponse {
    oneof response {
        kyc.RetryProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message ProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message ProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfAddressResponse {
    oneof response {
        kyc.ProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfAddressResponse {
    oneof response {
        kyc.RetryProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message GetClientVerificationProgressRequest {
    string ClientId = 1;
}

enum InitKycStatus {
    IKS_NOT_INIT = 0;
    IKS_SUCCESS = 1;
}

enum WaitKycStatus {        
    WKS_NOT_INIT = 0;
    WKS_PENDING = 1;
    WKS_SUCCESS = 2;
    WKS_FAIL = 3;
    WKS_RETRY = 4;
} 

message ContractModel
{
    string ContractId = 1;
    ContractSignStatus ContractSignStatus = 2;
}

enum ContractSignStatus
{
    CSS_NOT_INIT = 0;
    CSS_PENDING = 1;
    CSS_SUCCESS = 2;
    CSS_STATUS_FAIL = 3;
}

message GetClientVerificationProgressResponse {
    bool IsVerificationProgressEnabled = 1;
    InitKycStatus InitiationPoIStatus  = 2;
    InitKycStatus InitiationPoAStatus = 3;
    WaitKycStatus WaitPoIStatus = 4;
    WaitKycStatus WaitPoAStatus = 5;
    repeated ContractModel ContractSignStatus = 6;
}

enum ProofStatus {
    PS_APPROVED = 0;
    PS_RESUBMISSION = 1;
    PS_REJECTED = 2;
    PS_PENDING = 3;
}

enum ProofResult {
    PR_RETRY = 0;
    PR_FINAL = 1;
    PR_APPROVED = 2;
}

enum ProofType {
    PT_POI = 0;
    PT_POA = 1;
}

message ProofDocument{
    string DocumentId = 1;
    bool IsVerified = 2;
    string DocumentType = 3;
    string Comment = 4;
}

message ProofModel {
    string InternalVerificationId = 1;
    string SumsubVerificationId = 2;
    string ClientId = 3;
    string ApplicantId = 4;
    int64 StartDate = 5;
    int64 FinishDate = 6;
    repeated ProofDocument Documents = 7;
    ProofStatus Status = 8;
    ProofResult Result = 9;
    string Comment = 10;
    ProofType Type = 11;
    int64 CreatedAt = 12;
    int64 UpdatedAt = 13;
}

message GetProofsOfIdentityRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
}

message GetProofsOfIdentityResponse {
    repeated kyc.ProofModel Items = 1;
}

message GetProofsOfAddressRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
}

message GetProofsOfAddressResponse {
    repeated kyc.ProofModel Items = 1;
}

message GetContractorsRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional int64 Date = 4;
}

enum ContractStatus {
    CS_NOT_INIT = 0;
    CS_GRANTED_LIVE_ACCOUNT = 1;
    CS_REJECTED = 2;
    CS_REJECTED_AND_BLOCKED = 3;
}

message ContractorModel {
    string TradingPackageId = 1;
    string ClientId = 2;
    int64 SendingDate = 3;
    bool PoI = 4;
    bool PoA = 5;
    bool IsSignedContractReceived = 6;
    ContractStatus Status = 7;
    string Comment = 8;
    int64 CreatedAt = 9;
    int64 UpdatedAt = 10;
}

message GetContractorsResponse {
    repeated kyc.ContractorModel Items = 1;
}

message ContractorGrantLiveAccountRequest {
    string TradingPackageId = 1;
}

message ContractorGrantLiveAccountResponseBody{
    string TraderAccountId = 1;
    int64 MetatraderLogin = 2;
}

message ContractorGrantLiveAccountResponse {
    oneof response {
        kyc.ContractorGrantLiveAccountResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}   

message ContractorCommentRequest {
    string TradingPackageId = 1;
    string Comment = 2;
}

message ContractorCommentResponseBody{
}

message ContractorCommentResponse {
    oneof response {
        kyc.ContractorGrantLiveAccountResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}  

message ContractorRejectRequest {
    string TradingPackageId = 1;
}

message ContractorRejectResponseBody{
}

message ContractorRejectResponse {
    oneof response {
        kyc.ContractorRejectResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}

message ContractorRejectAndBlockRequest {
    string TradingPackageId = 1;
    string Comment = 2;
}

message ContractorRejectAndBlockResponseBody{
}

message ContractorRejectAndBlockResponse {
    oneof response {
        kyc.ContractorRejectAndBlockResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}

message GetClientProofsRequest {
    string ClientId = 1;
    uint64 Limit = 2;
    uint64 Offset = 3;
}   

message GetClientProofsResponse {
    repeated kyc.ProofModel Items = 1;
}

service KycGrpcService {
    // API
    rpc ProofOfIdentity(kyc.ProofOfIdentityRequest) 
    returns (kyc.ProofOfIdentityResponse);

    rpc RetryProofOfIdentity(kyc.RetryProofOfIdentityRequest) 
    returns (kyc.RetryProofOfIdentityResponse);

    rpc ProofOfAddress(kyc.ProofOfAddressRequest) 
    returns (kyc.ProofOfAddressResponse);

    rpc RetryProofOfAddress(kyc.RetryProofOfIdentityRequest) 
    returns (kyc.RetryProofOfIdentityResponse);

    rpc GetClientVerificationProgress(kyc.GetClientVerificationProgressRequest) 
    returns (kyc.GetClientVerificationProgressResponse);

    // Backoffice
    rpc GetProofsOfIdentity(kyc.GetProofsOfIdentityRequest)
    returns (kyc.GetProofsOfIdentityResponse);

    rpc GetProofsOfAddress(kyc.GetProofsOfAddressRequest)
    returns (kyc.GetProofsOfAddressResponse);

    rpc GetContractors(kyc.GetContractorsRequest)
    returns (kyc.GetContractorsResponse);

    rpc ContractorGrantLiveAccount(kyc.ContractorGrantLiveAccountRequest)
    returns (kyc.ContractorGrantLiveAccountResponse);

    rpc ContractorComment(kyc.ContractorCommentRequest)
    returns (kyc.ContractorCommentResponse);

    rpc ContractorReject(kyc.ContractorRejectRequest)
    returns (kyc.ContractorRejectResponse);

    rpc ContractorRejectAndBlock(kyc.ContractorRejectAndBlockRequest)
    returns (kyc.ContractorRejectAndBlockResponse);
    
    // Backoffice Client Panel
    rpc GetClientProofs(kyc.GetClientProofsRequest)
    returns (kyc.GetClientProofsResponse);

    // Ping
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
