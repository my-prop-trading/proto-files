syntax = "proto3";
package kyc;
import "google/protobuf/empty.proto";

enum KycError {
    OK = 0;
    INTERNAL_ERROR = 1;
}

message ProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message ProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfIdentityResponse {
    oneof response {
        kyc.ProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfIdentityResponse {
    oneof response {
        kyc.RetryProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message ProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message ProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfAddressResponse {
    oneof response {
        kyc.ProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfAddressResponse {
    oneof response {
        kyc.RetryProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}


message GetClientVerificationProgressRequest {
    string ClientId = 1;
}

enum InitKycStatus {
    IKS_NOT_INIT = 0;
    IKS_SUCCESS = 1;
}

enum WaitKycStatus {        
    WKS_NOT_INIT = 0;
    WKS_PENDING = 1;
    WKS_SUCCESS = 2;
    WKS_FAIL = 3;
    WKS_RETRY = 4;
} 

message ContractModel
{
    string ContractId = 1;
    ContractSignStatus ContractSignStatus = 2;
}

enum ContractSignStatus
{
    CSS_NOT_INIT = 0;
    CSS_PENDING = 1;
    CSS_SUCCESS = 2;
    CSS_STATUS_FAIL = 3;
}

message GetClientVerificationProgressResponse {
    bool IsVerificationProgressEnabled = 1;
    InitKycStatus InitiationPoIStatus  = 2;
    InitKycStatus InitiationPoAStatus = 3;
    WaitKycStatus WaitPoIStatus = 4;
    WaitKycStatus WaitPoAStatus = 5;
    repeated ContractModel ContractSignStatus = 6;
}

enum ProofStatus {
    PS_APPROVED = 0;
    PS_RESUBMISSION = 1;
    PS_REJECTED = 2;
    PS_PENDING = 3;
}

enum ProofResult {
    PR_RETRY = 0;
    PR_FINAL = 1;
    PR_APPROVED = 2;
}

message ProofDocument{
    string DocumentId = 1;
    bool IsVerified = 2;
    string DocumentType = 3;
    string Comment = 4;
}

message ProofModel {
    string InternalVerificationId = 1;
    string SumsubVerificationId = 2;
    string ClientId = 3;
    string ApplicantId = 4;
    int64 StartDate = 5;
    int64 FinishDate = 6;
    repeated ProofDocument Documents = 7;
    ProofStatus Status = 8;
    ProofResult Result = 9;
    string Comment = 10;
    int64 CreatedAt = 11;
    int64 UpdatedAt = 12;
}

message GetProofsOfIdentityRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
}

message GetProofsOfIdentityResponse {
    repeated kyc.ProofModel Items = 1;
}

message GetProofsOfAddressRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
}

message GetProofsOfAddressResponse {
    repeated kyc.ProofModel Items = 1;
}

message GetContractorsRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
}

service KycGrpcService {
    // From API
    rpc ProofOfIdentity(kyc.ProofOfIdentityRequest) 
    returns (kyc.ProofOfIdentityResponse);

    rpc RetryProofOfIdentity(kyc.RetryProofOfIdentityRequest) 
    returns (kyc.RetryProofOfIdentityResponse);

    rpc ProofOfAddress(kyc.ProofOfAddressRequest) 
    returns (kyc.ProofOfAddressResponse);

    rpc RetryProofOfAddress(kyc.RetryProofOfIdentityRequest) 
    returns (kyc.RetryProofOfIdentityResponse);

    rpc GetClientVerificationProgress(kyc.GetClientVerificationProgressRequest) 
    returns (kyc.GetClientVerificationProgressResponse);

    //FROM Backoffice
    rpc GetProofsOfIdentity(kyc.GetProofsOfIdentityRequest)
    returns (kyc.GetProofsOfIdentityResponse);

    rpc GetProofsOfAddress(kyc.GetProofsOfAddressRequest)
    returns (kyc.GetProofsOfAddressResponse);

    rpc GetContractors(kyc.GetContractorsRequest)
    returns (kyc.GetContractorsResponse);

    //Ping
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
