syntax = "proto3";
package kyc;
import "google/protobuf/empty.proto";

enum KycError {
    OK = 0;
    INTERNAL_ERROR = 1;
    NO_TRADING_ACCOUNT = 2;
    NO_TRADING_PACKAGE = 3; 
    METATARDER_ERROR = 4; 
    NOT_AUTHORIZED = 5; 
}

message ProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
    string Brand = 4;
}

message ProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfIdentityResponse {
    oneof response {
        kyc.ProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfIdentityRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfIdentityResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfIdentityResponse {
    oneof response {
        kyc.RetryProofOfIdentityResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message ProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
    string Brand = 4;
}

message ProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message ProofOfAddressResponse {
    oneof response {
        kyc.ProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message RetryProofOfAddressRequest {
    string ClientId = 1;
    string Country = 2;
    string ProcessId = 3;
}

message RetryProofOfAddressResponseBody {
    string Token = 1;
    int64 CreatedAt = 2;
}

message RetryProofOfAddressResponse {
    oneof response {
        kyc.RetryProofOfAddressResponseBody Body = 1;
        kyc.KycError Error = 2;
    } 
}

message GetClientVerificationProgressRequest {
    string ClientId = 1;
}

enum InitKycStatus {
    IKS_NOT_INIT = 0;
    IKS_SUCCESS = 1;
}

enum WaitKycStatus {        
    WKS_NOT_INIT = 0;
    WKS_PENDING = 1;
    WKS_SUCCESS = 2;
    WKS_FAIL = 3;
    WKS_RETRY = 4;
} 

message ContractModel
{
    string ContractId = 1;
    kyc.ContractSignStatus ContractSignStatus = 2;
}

enum ContractSignStatus
{
    CSS_NOT_INIT = 0;
    CSS_PENDING = 1;
    CSS_SUCCESS = 2;
    CSS_STATUS_FAIL = 3;
    CSS_STATUS_FAIL_AND_BLOCKED = 4;
}

message GetClientVerificationProgressResponse {
    bool IsVerificationProgressEnabled = 1;
    kyc.InitKycStatus InitiationProofOfIdentityStatus  = 2;
    kyc.InitKycStatus InitiationProofOfAddressStatus = 3;
    kyc.WaitKycStatus WaitProofOfIdentityStatus = 4;
    kyc.WaitKycStatus WaitProofOfAddressStatus = 5;
    repeated kyc.ContractModel ContractSignStatus = 6;
}

enum ProofStatus {
    PS_APPROVED = 0;
    PS_RESUBMISSION = 1;
    PS_REJECTED = 2;
    PS_PENDING = 3;
}

enum ProofResult {
    PR_RETRY = 0;
    PR_FINAL = 1;
    PR_APPROVED = 2;
}

enum ProofType {
    PROOF_OF_IDENTITY = 0;
    PROOF_OF_ADDRESS = 1;
}

message ProofDocument{
    string DocumentId = 1;
    bool IsVerified = 2;
    string DocumentType = 3;
    string Comment = 4;
    string Officer = 5;
}
message ProofCommentModel
{
    int64 CreatedAt = 1;
    string Comment = 2;
    string OfficerId = 3;    
}

message ProofModel {
    optional string InternalVerificationId = 1;
    optional string SumsubVerificationId = 2;
    string ClientId = 3;
    optional string ApplicantId = 4;
    optional int64 StartDate = 5;
    optional int64 FinishDate = 6;
    repeated kyc.ProofDocument Documents = 7;
    optional kyc.ProofStatus Status = 8;
    optional kyc.ProofResult Result = 9;
    optional string Comment = 10;
    kyc.ProofType Type = 11;
    int64 CreatedAt = 12;
    int64 UpdatedAt = 13;
    string Brand = 14;
}

message GetProofsOfIdentityRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
    optional kyc.ProofStatus ProofStatus = 6;
    optional kyc.ProofResult ProofResult = 7;
}

message GetProofsOfIdentityResponse {
    repeated kyc.ProofModel Items = 1;
    uint64 TotalCount = 2;
}

message GetProofsOfAddressRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional string InternalVerificationId = 4;
    optional string SumsubVerificationId = 5;
    optional kyc.ProofStatus ProofStatus = 6;
    optional kyc.ProofResult ProofResult = 7;
}

message GetProofsOfAddressResponse {
    repeated kyc.ProofModel Items = 1;
    uint64 TotalCount = 2;
}

message GetContractorsRequest {
    uint64 Limit = 1;
    uint64 Offset = 2;
    optional string ClientId = 3;
    optional int64 FromDate = 4;
    optional int64 ToDate = 5;
}

enum ContractStatus {
    CS_NOT_INIT = 0;
    CS_GRANTED_LIVE_ACCOUNT = 1;
    CS_REJECTED = 2;
    CS_REJECTED_AND_BLOCKED = 3;
}

message ContractorModel {
    string TraderAccountAggregatedId = 1;
    string ClientId = 2;
    optional int64 SendingDate = 3;
    bool ProofOfIdentity = 4;
    bool ProofOfAddress = 5;
    bool IsSignedContractReceived = 6;
    kyc.ContractStatus Status = 7;
    repeated kyc.ContractorCommentModel Comments = 8;
    int64 CreatedAt = 9;
    int64 UpdatedAt = 10;
    string Brand = 11;
    repeated kyc.ContractorLogModel Logs = 12;
    int64 ContractId = 13;
    optional kyc.ContractSignStatus SignStatus = 14;
}
    
message ContractorCommentModel {
    int64 CreatedAt = 1;
    string Comment = 2;
    string OfficerId = 3;
}

message ContractorLogModel {
    int64 CreatedAt = 1;
    string Comment = 2;
    string OfficerId = 3;
}

message GetContractorsResponse {
    repeated kyc.ContractorModel Items = 1;
    uint64 TotalCount = 2;
}

message ContractorGrantLiveAccountRequest {
    string TraderAccountAggregatedId = 1;
    string ClientId = 2;
    int64 ContractId = 3;
    string OfficerId = 4;
}

message ContractorGrantLiveAccountResponseBody{
}

message ContractorGrantLiveAccountResponse {
    oneof response {
        kyc.ContractorGrantLiveAccountResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}   

message ContractorSignContractRequest {
    string TraderAccountAggregatedId = 1;
    string ClientId = 2;
    int64 ContractId = 3;
    string OfficerId = 4;
}

message ContractorSignContractResponseBody{
    ContractorModel Contract = 1;
}

message ContractorSignContractResponse {
    oneof response {
        kyc.ContractorSignContractResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}   

message ContractorCommentRequest {
    string TraderAccountAggregatedId = 1;
    string Comment = 2;
    string OfficerId = 3;
}

message ContractorCommentResponseBody{
}

message ContractorCommentResponse {
    oneof response {
        kyc.ContractorCommentResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}  

message ContractorRejectRequest {
    string TraderAccountAggregatedId = 1;
    string OfficerId = 2;
}

message ContractorRejectResponseBody{
}

message ContractorRejectResponse {
    oneof response {
        kyc.ContractorRejectResponseBody Body = 1;
        kyc.KycError Error = 2;
      }
}

message ContractorRejectAndBlockRequest {
    string TraderAccountAggregatedId = 1;
    string Comment = 2;
    string OfficerId = 3;
}

message ContractorRejectAndBlockResponseBody{
}

message ContractorRejectAndBlockResponse {
    oneof response {
        kyc.ContractorRejectAndBlockResponseBody Body = 1;
        kyc.KycError Error = 2;
    }
}

message GetClientProofsRequest {
    string ClientId = 1;
}   
enum ProofClientStatus{
    PCS_NOT_REQUESTED = 0;
    PCS_REQUESTED = 1;
    PCS_PENDING = 2;
    PCS_SUCCESS = 3;
    PCS_FAIL = 4;
    PCS_RETRY = 5;
}

message PersonalDataModel {
    string FirstName = 1;
    string LastName = 2;
    int64 DateOfBirth = 3;
    string CountryOfResidence = 4;
    string CountryProofOfIdentity = 5;
    string CountryProofOfAddres = 6;
}

message GetClientProofsResponse {
    kyc.ProofClientStatus ProofOfIdentityStatus = 1;
    kyc.ProofClientStatus ProofOfAddressStatus = 2;
    repeated kyc.ProofModel Items = 3;
    optional kyc.PersonalDataModel PersonalData = 4;
}

message GetClientContractsRequest {
    string ClientId = 1;
}

message GetClientContractsResponse {
    repeated kyc.ContractorModel Items = 1;
}

message GetIdentityInfoFromKycProviderRequest {
    string ClientId = 1;
    string ApplicantId = 2;
}

message GetIdentityInfoFromKycProviderBody {

}

message GetIdentityInfoFromKycProviderResponse {
    oneof response {
        kyc.GetIdentityInfoFromKycProviderBody Body = 1;
        kyc.KycError Error = 2;
    }
} 

message GetAddressInfoFromKycProviderRequest {
    string ClientId = 1;
    string ApplicantId = 2;
}

message GetAddressInfoFromKycProviderBody {

}

message GetAddressInfoFromKycProviderResponse {
    oneof response {
        kyc.GetAddressInfoFromKycProviderBody Body = 1;
        kyc.KycError Error = 2;
    }
} 

service KycGrpcService {
    // API
    rpc ProofOfIdentity(kyc.ProofOfIdentityRequest) 
    returns (kyc.ProofOfIdentityResponse);

    rpc RetryProofOfIdentity(kyc.RetryProofOfIdentityRequest) 
    returns (kyc.RetryProofOfIdentityResponse);

    rpc ProofOfAddress(kyc.ProofOfAddressRequest) 
    returns (kyc.ProofOfAddressResponse);

    rpc RetryProofOfAddress(kyc.RetryProofOfAddressRequest) 
    returns (kyc.RetryProofOfAddressResponse);

    rpc GetClientVerificationProgress(kyc.GetClientVerificationProgressRequest) 
    returns (kyc.GetClientVerificationProgressResponse);

    // Backoffice
    rpc GetProofsOfIdentity(kyc.GetProofsOfIdentityRequest)
    returns (kyc.GetProofsOfIdentityResponse);

    rpc GetProofsOfAddress(kyc.GetProofsOfAddressRequest)
    returns (kyc.GetProofsOfAddressResponse);

    rpc GetContractors(kyc.GetContractorsRequest)
    returns (kyc.GetContractorsResponse);

    rpc ContractorSignContract(kyc.ContractorSignContractRequest)
    returns (kyc.ContractorSignContractResponse);

    rpc ContractorGrantLiveAccount(kyc.ContractorGrantLiveAccountRequest)
    returns (kyc.ContractorGrantLiveAccountResponse);

    rpc ContractorComment(kyc.ContractorCommentRequest)
    returns (kyc.ContractorCommentResponse);

    rpc ContractorReject(kyc.ContractorRejectRequest)
    returns (kyc.ContractorRejectResponse);

    rpc ContractorRejectAndBlock(kyc.ContractorRejectAndBlockRequest)
    returns (kyc.ContractorRejectAndBlockResponse);
    
    // Retry info
    rpc GetIdentityInfoFromKycProvider(kyc.GetIdentityInfoFromKycProviderRequest)
    returns (kyc.GetIdentityInfoFromKycProviderResponse);

    rpc GetAddressInfoFromKycProvider(kyc.GetAddressInfoFromKycProviderRequest)
    returns (kyc.GetAddressInfoFromKycProviderResponse);

    // Backoffice Client Panel
    rpc GetClientProofs(kyc.GetClientProofsRequest)
    returns (kyc.GetClientProofsResponse);

    rpc GetClientContracts(kyc.GetClientContractsRequest)
    returns (kyc.GetClientContractsResponse);

    // Ping
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
