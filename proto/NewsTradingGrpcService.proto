syntax = "proto3";
package news_trading;
import "google/protobuf/empty.proto";

enum ImpactType {
  LOW = 0; // default
  MEDIUM = 1;
  HIGH = 2;
}

enum NewsStatus {
    NEW = 0; // default
    STARTED = 1;
    FINISHED = 2;
    DONE = 3;
}

enum Error {
  TECHNICAL_ERROR = 0;
  NEWS_IS_OUTDATED = 1;
  NEWS_ALREADY_EXIST = 2;
  NO_SUCH_NEWS = 3;
}

message NewsModel {
    string Id = 1;
    string Event = 2;
    ImpactType Impact = 3;
    NewsStatus Status = 4;
    repeated string Currencies = 5; 
    int64 EventDate = 6;
    optional int64 DateStart = 7; 
    optional int64 DateEnd = 8;
    int64 UpdatedAt = 9;   
}

message CreateNewsRequest{
  string Event = 1;
  ImpactType Impact = 2;
  repeated string Currencies = 3; 
  int64 EventDate = 4;
}

message CreateNewsResponse {
  oneof response { 
    CreateNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message CreateNewsResponseBody {
    NewsModel Item = 1;
}

message UpdateNewsRequest{
  string Id = 1;
  string Event = 2;
  ImpactType Impact = 3;
  NewsStatus Status = 4;
  repeated string Currencies = 5; 

  int64 EventDate = 7;
  optional int64 DateStart = 8; 
  optional int64 DateEnd = 9;
}

message UpdateNewsResponse {
  oneof response { 
    UpdateNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message UpdateNewsResponseBody {
    NewsModel Item = 1;
}

message GetNewsPaginatedRequest {
  repeated NewsStatus Status = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
}

message GetNewsTotalByStatusRequest {
  repeated NewsStatus Status = 1;
}

message GetNewsTotalByStatusResponse {
  oneof response { 
    GetNewsTotalByStatusResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetNewsTotalByStatusResponseBody {
  uint64 Total = 1;
}

message DeleteNewsRequest {
  string Id = 1;
}

message DeleteNewsResponse {
  oneof response { 
    DeleteNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message DeleteNewsResponseBody {
  NewsModel Item = 1;
}

message GetNewsResponse {
  oneof response { 
    GetNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetNewsResponseBody {
    NewsModel Item = 1;
}

enum TradeTypeModel {
  BUY = 0;
  SELL = 1;
  BUY_LIMIT = 2;
  SELL_LIMIT = 3;
  BUY_STOP = 4;
  SELL_STOP = 5;
  BALANCE = 6;
  CREDIT = 7;
}

message GetAffectedTradesPaginatedRequest {
  optional string Id = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  optional int64 FromDate = 4;
  optional int64 ToDate = 5;
  optional int32 PlatformId = 6;
  optional string NewsId = 7;
}

message AffectedTradeModel {
  string Id = 1;      
  string NewsId = 2;  
  int32 PlatformId = 3;     
  string PlatformAccountId = 4;
  string TraderAccountId = 5;
  string Symbol = 6;
  int64 Digits = 7;
  TradeTypeModel TradeType = 8;
  double Lots = 9;
  int64 OpenTime = 10;        
  double OpenPrice = 11;
  double Sl = 12;
  double Tp = 13;
  optional int64 CloseTime = 14;       
  double Fee = 15;
  double Swap = 16;
  double ClosePrice = 17;
  double Profit = 18;
  double Taxes = 19;
  string Comment = 20;
  int64 NewsEventTime = 21;        
}

message GetAffectedTradesTotalRequest {}

message GetAffectedTradesTotalResponse {
  oneof response { 
    GetAffectedTradesTotalResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetAffectedTradesTotalResponseBody {
  uint64 Total = 1;
}

enum NewsRestrictions {
  OPEN_POSITIONS = 0;
  CLOSE_POSITIONS = 1;
  ALL_POSITIONS = 2;
}

enum AccountTypeRestrictions {
  DEMO = 0;
  LIVE = 1;
  ALL = 2;
}


message NewsSettingsModel {
  int64 BeforeNewsIntervalSec = 1;
  int64 AfterNewsIntervalSec = 2;
  NewsRestrictions Restrictions = 3;
  AccountTypeRestrictions AccountType = 4;
}

message GetNewsSettingsRequest {

}

message GetNewsSettingsResponse {
    oneof response {
        GetNewsSettingsResponseBody Body = 1;
        Error Error = 2;
    } 
}

message GetNewsSettingsResponseBody {
    NewsSettingsModel NewsSettings = 1;
}

message UpdateNewsSettingsRequest {
    NewsSettingsModel NewsSettings = 1;
}

message UpdateNewsSettingsResponse {
    oneof response {
        UpdateNewsSettingsResponseBody Body = 1;
        Error Error = 2;
    } 
}

message UpdateNewsSettingsResponseBody {
    NewsSettingsModel NewsSettings = 1;
}

message NewsPlatformModel {
  int32 PlatformId = 1;
  string PlatformName = 2;
  string Symbol = 3;
  string Base = 4;
  string Quote = 5; 
}

message CreateNewsPlatformRequest{
  int32 PlatformId = 1;
  string PlatformName = 2;
  string Symbol = 3;
  string Base = 4;
  string Quote = 5; 
}

message CreateNewsPlatformResponse {
  oneof response { 
    CreateNewsPlatformResponseBody Body = 1;
    Error Error = 2;
  }
}

message CreateNewsPlatformResponseBody {
  NewsPlatformModel Item = 1;
}

message UpdateNewsPlatformRequest{
  NewsPlatformModel Item = 1; 
}

message UpdateNewsPlatformResponse {
  oneof response { 
    UpdateNewsPlatformResponseBody Body = 1;
    Error Error = 2;
  }
}

message UpdateNewsPlatformResponseBody {
  NewsPlatformModel Item = 1;
}

message GetNewsPlatformPaginatedRequest {
  optional uint64 Limit = 1;
  optional uint64 Offset = 2;
  optional int32 PlatformId = 3;
  optional string Currency = 4;
}


message DeleteNewsPlatformRequest {
  int32 PlatformId = 1;
  string Symbol = 2;
}

message DeleteNewsPlatformResponse {
  oneof response { 
    DeleteNewsPlatformResponseBody Body = 1;
    Error Error = 2;
  }
}

message DeleteNewsPlatformResponseBody {
  NewsPlatformModel Item = 1;
}

service NewsTradingGrpcService {
    rpc CreateNews(CreateNewsRequest) returns (CreateNewsResponse);
    rpc UpdateNews(UpdateNewsRequest) returns (UpdateNewsResponse);
    rpc DeleteNews(DeleteNewsRequest) returns (DeleteNewsResponse);
    rpc GetNewsPaginated(GetNewsPaginatedRequest) returns (stream NewsModel);
    rpc GetNewsTotalByStatus(GetNewsTotalByStatusRequest) returns (GetNewsTotalByStatusResponse);

    rpc GetNewsAffectedTradesPaginated(GetAffectedTradesPaginatedRequest) returns (stream AffectedTradeModel);
    rpc GetNewsAffectedTradesTotal(GetAffectedTradesTotalRequest) returns (GetAffectedTradesTotalRequest);

    rpc GetNewsSettings(GetNewsSettingsRequest) returns (GetNewsSettingsResponse);
    rpc UpdateNewsSettings(UpdateNewsSettingsRequest) returns (UpdateNewsSettingsResponse);

    rpc CreateNewsPlatform(CreateNewsPlatformRequest) returns (CreateNewsPlatformResponse);
    rpc UpdateNewsPlatform(UpdateNewsPlatformRequest) returns (UpdateNewsPlatformResponse);
    rpc DeleteNewsPlatform(DeleteNewsPlatformRequest) returns (DeleteNewsPlatformResponse);
    rpc GetNewsPlatformPaginated(GetNewsPlatformPaginatedRequest) returns (stream NewsPlatformModel);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
