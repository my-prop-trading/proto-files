syntax = "proto3";
package news_trading;
import "google/protobuf/empty.proto";

enum ImpactType {
  LOW = 0; // default
  MEDIUM = 1;
  HIGH = 2;
}

enum NewsStatus {
    NEW = 0; // default
    STARTED = 1;
    FINISHED = 2;
    DONE = 3;
}

enum Error {
  TECHNICAL_ERROR = 0;
}

message PlatformCurrency {
  int32 PlatformId = 1;
  string PlatformName = 2;
  repeated string PlatformCurrencies = 3;
}

message NewsModel {
    string Id = 1;
    string Event = 2;
    ImpactType Impact = 3;
    NewsStatus Status = 4;
    repeated string Currencies = 5; 
    repeated PlatformCurrency Platforms = 6; 
    int64 EventDate = 7;
    optional int64 DateStart = 8; 
    optional int64 DateEnd = 9;
    int64 Timestamp = 10;   
    bool Deleted = 11;   
}

message CreateNewsRequest{
  string Event = 1;
  ImpactType Impact = 2;
  repeated string Currencies = 3; 
  repeated PlatformCurrency Platforms = 4; 
  int64 EventDate = 5;
}

message CreateNewsResponse {
  oneof response { 
    CreateNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message CreateNewsResponseBody {
    NewsModel Item = 1;
}

message UpdateNewsRequest{
  string Id = 1;
  string Event = 2;
  ImpactType Impact = 3;
  NewsStatus Status = 4;
  repeated string Currencies = 5; 
  repeated PlatformCurrency Platforms = 6; 
  int64 EventDate = 7;
  optional int64 DateStart = 8; 
  optional int64 DateEnd = 9;
}

message UpdateNewsResponse {
  oneof response { 
    UpdateNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message UpdateNewsResponseBody {
    NewsModel Item = 1;
}

message GetNewsPaginatedRequest {
  optional string Id = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  optional int64 FromDate = 4;
  optional int64 ToDate = 5;
  optional NewsStatus Status = 6;
}

message GetNewsPaginatedResponse {
  oneof response { 
    GetNewsPaginatedResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetNewsPaginatedResponseBody {
  repeated NewsModel Items = 1;
  uint64 Total = 2;
}

message DeleteNewsRequest {
  string Code = 1;
}

message DeleteNewsResponse {
  oneof response { 
    DeleteNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message DeleteNewsResponseBody {
  repeated NewsModel Items = 1;
  uint64 Total = 2;
}

message GetNewsRequest {
  string Code = 1;
}

message GetNewsResponse {
  oneof response { 
    GetNewsResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetNewsResponseBody {
    NewsModel Item = 1;
}

enum TradeTypeModel {
  BUY = 0;
  SELL = 1;
  BUY_LIMIT = 2;
  SELL_LIMIT = 3;
  BUY_STOP = 4;
  SELL_STOP = 5;
  BALANCE = 6;
  CREDIT = 7;
}

message GetAffectedTradesPaginatedRequest {
  optional string Id = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  optional int64 FromDate = 4;
  optional int64 ToDate = 5;
  optional int32 PlatformId = 6;
  optional string NewsId = 7;
}

message GetAffectedTradesPaginatedResponse {
  oneof response { 
    GetAffectedTradesPaginatedResponseBody Body = 1;
    Error Error = 2;
  }
}

message GetAffectedTradesPaginatedResponseBody {
  repeated AffectedTradeModel Items = 1;
  uint64 Total = 2;
}

message AffectedTradeModel {
  string Id = 1;      
  string NewsId = 2;  
  int32 PlatformId = 3;     
  string PlatfomAccountId = 4;
  string TraderAccountId = 5;
  string Symbol = 6;
  int64 Digits = 7;
  TradeTypeModel TradeType = 8;
  double Lots = 9;
  int64 OpenTime = 10;        
  double OpenPrice = 11;
  double Sl = 12;
  double Tp = 13;
  optional int64 CloseTime = 14;       
  double Fee = 15;
  double Swap = 16;
  double ClosePrice = 17;
  double Profit = 18;
  double Taxes = 19;
  string Comment = 20;
  int64 Timestamp = 21;        
}

message NewsSettingsModel {
  int64 BeforeNewsIntervalSec = 4;
  int64 AfterNewsIntervalSec = 5;
}

message GetNewsSettingsRequest {

}

message GetNewsSettingsResponse {
    oneof response {
        GetNewsSettingsResponseBody Body = 1;
        Error Error = 2;
    } 
}

message GetNewsSettingsResponseBody {
    NewsSettingsModel NewsSettings = 1;
}

message UpdateNewsSettingsRequest {
    optional NewsSettingsModel NewsSettings = 1;
}

message UpdateNewsSettingsResponse {
    oneof response {
        UpdateNewsSettingsResponseBody Body = 1;
        Error Error = 2;
    } 
}

message UpdateNewsSettingsResponseBody {
    NewsSettingsModel NewsSettings = 1;
}


service NewsTradingGrpcService {
    rpc CreateNews(CreateNewsRequest) returns (CreateNewsResponse);
    rpc UpdateNews(UpdateNewsRequest) returns (UpdateNewsResponse);
    rpc DeleteNews(DeleteNewsRequest) returns (DeleteNewsResponse);
    rpc GetNewsPaginated(GetNewsPaginatedRequest) returns (GetNewsPaginatedResponse);
    rpc GetNewsAffectedTradesPaginated(GetAffectedTradesPaginatedRequest) returns (GetAffectedTradesPaginatedResponse);
    rpc GetNewsSettings(GetNewsSettingsRequest) returns (GetNewsSettingsResponse);
    rpc UpdateNewsSettings(UpdateNewsSettingsRequest) returns (UpdateNewsSettingsResponse);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
