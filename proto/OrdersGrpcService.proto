syntax = "proto3";
package orders;
import "google/protobuf/empty.proto";

enum TraderPackageChallengeType {
  PHASE_1 = 0;
  PHASE_2 = 1;
  PHASE_3 = 2;
  INSTANT_FUNDING = 3;
}

enum OrderStatus {
  SUCCESSFUL = 0;
  UNPAID = 1;
  CANCELLED = 2;
  DECLINED = 3;
  PENDING = 4;
}

enum PurchaseType {
  INTERNAL = 0;
  EXTERNAL = 1;
}

message Order {
  string Id = 1;
  optional int64 CreatedAt = 2;
  double Price = 3;
  string PriceCurrency = 4;
  orders.OrderStatus Status = 5;
  string ClientId = 6;
  string TradingPackageTitle = 7; // Trading Package title
  double AccountBalance = 8; // Account balance in package
  //int32 AccountType = 9; // Demo or Live
  int32 PlatformId = 10; // Trading platform selected for package
  optional int64 PayBy = 11;
  string BrandId = 12;
  string PaymentUrl = 13;
  double DiscountPrice = 14; // Price
  string DiscountCode = 15;
  string TraderPackageGroup = 16;
  string TraderPackageGroupName = 17;
  string TraderAccountAggregatedId = 18;
  orders.PurchaseType PurchaseType = 19;
  optional int32 PaymentProviderOrderId = 20;
  optional string PaymentMethodTitle = 21;
  optional int64 PaidAt = 22;
  optional int64 UpdatedAt = 23;
  int32 OrderType = 24;
  string TradingPackageId = 25;
  optional double DiscountAmount = 26;
  optional orders.DiscountCodeType DiscountType = 27;
  bool IsFirstPurchase = 28;
  bool IsManual = 29;
  int32 ManualCompletedPhases = 30;
  string ManualApprovedByManager = 31;
  double TotalPaid = 32;
  double TotalDiscount = 33;
  optional string AffiliateId = 34;
  optional orders.LifetimeMetaData LifetimeMetadata = 35;
  orders.TraderPackageChallengeType TraderPackageChallengeType = 36;
  optional string PspOrderId = 37;
  optional int32 PaymentProviderId = 38;
}

message CreateTraderAccountOrderRequest {
  string TradingPackageId = 1;
  int32 PlatformId = 2;
  //int32 AccountType = 3;
  string FirstName = 4;
  string LastName = 5;
  string City = 6;
  string Country = 7;
  string ZipCode = 8;
  string Address = 9;
  string Phone = 10;
  optional string DiscountCode = 11;
  string ProcessId = 12;
  string ClientId = 13;
  string Brand = 14;
  orders.PurchaseType PurchaseType = 15;
}

message CreateTraderAccountOrderResponse {
  oneof response {
    orders.CreateTraderAccountOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message CreateTraderAccountOrderResponseBody {
  string OrderId = 1;
  int64 CreatedAt = 2;
  string PaymentUrl = 3;
  orders.OrderStatus Status = 4;
  PaymentPage PaymentPage = 5;
}

message PaymentPage {
  string Value = 1;
  PaymentPageType PageType = 2;
  PaymentPageDisplayType DisplayType = 3;
}

enum PaymentPageDisplayType {
  Tab = 0;
  Iframe = 1;
}

enum PaymentPageType {
  URL = 0;
  HTML = 1;
}

message PreviewOrderDiscountRequest {
  string TradingPackageId = 1;
  //int32 PlatformId = 2;
  //int32 AccountType = 3;
  optional string DiscountCode = 4;
  //string ProcessId = 5;
  optional string ClientId = 6;
  //string Brand = 7;
}

message PreviewOrderDiscountResponse {
  oneof response {
    orders.PreviewOrderDiscountResponseBody Body = 1;
    orders.PreviewOrderDiscountWithoutResponseBody BodyWithoutDiscount = 2;
    orders.PreviewOrderDiscountInvalidResponseBody BodyInvalidDiscount = 3;
    orders.PreviewError Error = 4;
    orders.PreviewOrderDiscountInvalidResponseBody BodyInvalidUsageExceeded = 5;
    orders.PreviewOrderDiscountInvalidResponseBody BodyInvalidDiscountExpired = 6;
  }
}

message PreviewOrderDiscountResponseBody {
  int64 CreatedAt = 1;
  double Price = 2;
  string PriceCurrency = 3;
  double DiscountAmount = 4;
  orders.DiscountCodeType DiscountType = 5;
}

message PreviewOrderDiscountWithoutResponseBody {
  int64 CreatedAt = 1;
  double Price = 2;
  string PriceCurrency = 3;
}

message PreviewOrderDiscountInvalidResponseBody {
  int64 CreatedAt = 1;
  double Price = 2;
  string PriceCurrency = 3;
}

enum DiscountCodeType {
  FIXED = 0; // default
  PERCENT = 1;
}

enum PreviewError {
  PE_OK = 0;
  PE_PACKAGE_NOT_FOUND = 1;
}

message GetOrdersPaginatedRequest {
  optional string ClientId = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  repeated orders.OrderStatus Statuses = 4;
  optional uint64 FromDate = 5;
  optional uint64 ToDate = 6;
}

message GetOrdersPaginatedResponse {
  repeated orders.Order Orders = 1;

  uint64 Total = 2;
}

message PayForOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
  orders.CardDetails CardDetails = 3;
}

message CardDetails {
  string CardNumber = 1;
  string CardHolderName = 2;
  uint32 ExpiryMonth = 3;
  uint32 ExpiryYear = 4;
  uint32 Cvv = 5;
}

message PayForOrderResponse {
  oneof response {
    orders.PayForOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message PayForOrderResponseBody {
}

message CancelOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
  orders.CardDetails CardDetails = 3;
}

message CancelOrderResponse {
  oneof response {
    orders.CancelOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message CancelOrderResponseBody {
}

enum OrdersError {
  OK = 0;
  PackageNotFound = 1;
  OrderNotFound = 2;
  OrderNotPending = 3;
  OrderNotPaid = 4;
  InvalidDiscountCode = 5;
  DiscountCodeUsageExceeded = 6;
  DiscountCodeExpired = 7;
  FailedToUpdateLifetime = 8;
}

message GetPayinsPaginatedRequest {
  optional string ClientId = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  repeated orders.OrderStatus Statuses = 4;
  optional string OrderNumber = 5;
  optional string TraderPackageId = 6;
  optional int64 FromDate = 7;
  optional int64 ToDate = 8;
  optional string TraderAggregatedId = 9;
  optional bool IsFirstPayin = 10;
}


message LifetimeMetaData {
  optional string lifetime_discount_code = 1;
  optional string platform_group_live = 2;
  optional string platform_group_demo = 3;
}

message Payin {
  int64 CreatedAt = 1; // Date and time of the order creation, typically represented as int64
  string OrderNumber = 2;      // Order number
  string ClientId = 3;         // Client ID, can be used as a link to client profile
  string TradingPackageTitle = 4; // Trading Package title
  double AccountBalance = 5; // Account balance in package
  //int32 AccountType = 6; // Demo or Live
  int32 PlatformId = 7; // Trading platform selected for package
  int64 PaidAt = 8; // Pay by (Date and time of the order creation + 30 days), typically represented as int64
  double Price = 9; // Price
  string Currency = 10; // Currency
  orders.OrderStatus Status = 11; // Status (Unpaid, Success, Pending, Canceled)
  string TradingPackageId = 12; // Trading Package ID
  string TraderAccountAggregatedId = 13; // Trader account aggregate ID (should be filled for orders with status Success only)
  optional string DiscountCode = 14;
  double DiscountPrice = 15;
  optional double DiscountAmount = 16;
  optional orders.DiscountCodeType DiscountType = 17;
  orders.PurchaseType PurchaseType = 18;
  optional int32 PaymentProviderOrderId = 20;
  bool IsFirstPayin = 21;
  optional string GrantedByManager = 22;
  optional string AffiliateId = 23;
  LifetimeMetaData lifetime_metadata = 24; //YURA!!!!
  optional string PaymentMethodTitle = 25;
  orders.TraderPackageChallengeType ChallengeType = 26;
}

message GetPayinsPaginatedResponse {
  repeated orders.Payin Payins = 1;
  uint64 TotalCount = 2;
}


message GetOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
}

message GetOrderResponse {
  oneof response {
    orders.GetOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message GetOrderResponseBody {
  orders.Order Order = 1;
}

message CreatePaidTraderAccountOrderRequest {
  string TradingPackageId = 1;
  int32 PlatformId = 2;
  string ProcessId = 3;
  string ClientId = 4;
  string Brand = 5;
  uint32 PaidPhases = 6;
  string Manager = 7;
  optional double RefundGrantedByManager = 8;
  LifetimeMetaData lifetime_metadata = 9;
}

message CreatePaidTraderAccountOrderResponse {
  oneof response {
    orders.CreateTraderAccountOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message MarkPayinAsSuccessfulOrderRequest {
  string OrderId = 1;
  string ProcessId = 2;
  optional string Manager = 3;
  optional int32 PaymentProviderOrderId = 4; // Trading platform selected for package
  optional string PaymentUrl = 5;
  optional bool IsFirstPayin = 6;
}

message MarkPayinAsSuccessfulOrderResponse {
  oneof response {
    orders.OrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  }
}

message OrderResponseBody {
  string OrderId = 1;
  orders.OrderStatus Status = 2;
}

service OrdersGrpcService {
  rpc GetPayinsPaginated(orders.GetPayinsPaginatedRequest) returns (orders.GetPayinsPaginatedResponse);

  rpc CreateTraderAccountOrder(orders.CreateTraderAccountOrderRequest) returns (orders.CreateTraderAccountOrderResponse);

  //this is through admin panel
  rpc CreatePaidTraderAccountOrder(orders.CreatePaidTraderAccountOrderRequest) returns (orders.CreatePaidTraderAccountOrderResponse);

  rpc MarkPayinAsSuccessfulOrder(orders.MarkPayinAsSuccessfulOrderRequest) returns (orders.MarkPayinAsSuccessfulOrderResponse);

  rpc PreviewOrderDiscount(orders.PreviewOrderDiscountRequest) returns (orders.PreviewOrderDiscountResponse);

  rpc GetOrdersPaginated(orders.GetOrdersPaginatedRequest) returns (orders.GetOrdersPaginatedResponse);

  rpc GetOrder(orders.GetOrderRequest) returns (orders.GetOrderResponse);

  rpc PayForOrder(orders.PayForOrderRequest) returns (orders.PayForOrderResponse);

  rpc CancelOrder(orders.CancelOrderRequest) returns (orders.CancelOrderResponse);

  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
