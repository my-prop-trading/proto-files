syntax = "proto3";
package orders;
import "google/protobuf/empty.proto";
import "MetatraderBroker.proto";
import "MetatraderPlatform.proto";

enum OrderStatus {
  SUCCESSFUL = 0;
  UNPAID = 1;
  CANCELLED = 2;
  DECLINED = 3;
  PENDING = 4;
}

message Order {
  string Id = 1;
  optional int64 CreatedAt = 2;
  double Price = 3;
  string PriceCurrency = 4;
  orders.OrderStatus Status = 5;
  string ClientId = 6;
  string TradingPackageTitle = 7; // Trading Package title
  double AccountBalance = 8; // Account balance in package
  metatrader_broker.BrokerModel Broker = 9; // Broker selected for package
  metatrader_platfom.TradingPlatformModel TradingPlatform = 10; // Trading platform selected for package
  optional int64 PayBy = 11; 
  string BrandId = 12; 
  string PaymentUrl = 13;
}

message CreateTraderAccountOrderRequest {
  string TradingPackageId = 1;
  metatrader_platfom.TradingPlatformModel TradingPlatform = 2;
  metatrader_broker.BrokerModel BrokerModel = 3;
  string FirstName = 4;
  string LastName = 5;
  string City = 6;
  string Country = 7;
  string ZipCode = 8;
  string Address = 9;
  string Phone = 10;
  optional string DiscountCode = 11;
  string ProcessId = 12;
  string ClientId = 13;
  string Brand = 14;
}

message CreateTraderAccountOrderResponse {
  oneof response {
    orders.CreateTraderAccountOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  } 
}

message CreateTraderAccountOrderResponseBody {
  string OrderId = 1;
  int64 CreatedAt = 2;
  string PaymentUrl = 3;
}

message GetOrdersPaginatedRequest {
  optional string ClientId = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  repeated orders.OrderStatus Statuses = 4;
}

message GetOrdersPaginatedResponse {
  repeated orders.Order Orders = 1;

  uint64 Total = 2;
}

message PayForOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
  orders.CardDetails CardDetails = 3;
}

message CardDetails {
  string CardNumber = 1;
  string CardHolderName = 2;
  uint32 ExpiryMonth = 3;
  uint32 ExpiryYear = 4;
  uint32 Cvv = 5;
}

message PayForOrderResponse {
  oneof response {
    orders.PayForOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  } 
}

message PayForOrderResponseBody {
}

message CancelOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
  orders.CardDetails CardDetails = 3;
}

message CancelOrderResponse {
  oneof response {
    orders.CancelOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  } 
}

message CancelOrderResponseBody {
}

enum OrdersError {
  OK = 0;
  PackageNotFound = 1;
  OrderNotFound = 2;
  OrderNotPending = 3;
  OrderNotPaid = 4;
}

message GetPayinsPaginatedRequest {
  optional string ClientId = 1;
  uint64 Limit = 2;
  uint64 Offset = 3;
  repeated orders.OrderStatus Statuses = 4;
  optional string OrderNumber = 5;
  optional string TraderPackageId = 6;
  optional int64 FromDate = 7;
  optional int64 ToDate = 8;
  optional string TraderAggregatedId = 9;
}

message Payin {
    int64 CreatedAt = 1; // Date and time of the order creation, typically represented as int64
    string OrderNumber = 2;      // Order number
    string ClientId = 3;         // Client ID, can be used as a link to client profile
    string TradingPackageTitle = 4; // Trading Package title
    double AccountBalance = 5; // Account balance in package
    metatrader_broker.BrokerModel Broker = 6; // Broker selected for package
    metatrader_platfom.TradingPlatformModel TradingPlatform = 7; // Trading platform selected for package
    int64 PaidAt= 8; // Pay by (Date and time of the order creation + 30 days), typically represented as int64
    double Price = 9; // Price
    string Currency = 10; // Currency
    orders.OrderStatus Status = 11; // Status (Unpaid, Success, Pending, Canceled)
    string TradingPackageId = 12; // Trading Package ID
    string TraderAccountAggregatedId = 13; // Trader account aggregate ID (should be filled for orders with status Success only)
}

message GetPayinsPaginatedResponse {
  repeated orders.Payin Payins = 1;
}


message GetOrderRequest {
  string OrderId = 1;
  string ClientId = 2;
}

message GetOrderResponse {
  oneof response {
    orders.GetOrderResponseBody Body = 1;
    orders.OrdersError Error = 2;
  } 
}

message GetOrderResponseBody {
  orders.Order Order = 1;
}

service OrdersGrpcService {
    rpc GetPayinsPaginated(orders.GetPayinsPaginatedRequest) returns (orders.GetPayinsPaginatedResponse);

    rpc CreateTraderAccountOrder(orders.CreateTraderAccountOrderRequest) returns (orders.CreateTraderAccountOrderResponse);

    rpc GetOrdersPaginated(orders.GetOrdersPaginatedRequest) returns (orders.GetOrdersPaginatedResponse);

    rpc GetOrder(orders.GetOrderRequest) returns (orders.GetOrderResponse);

    rpc PayForOrder(orders.PayForOrderRequest) returns (orders.PayForOrderResponse);

    rpc CancelOrder(orders.CancelOrderRequest) returns (orders.CancelOrderResponse);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
