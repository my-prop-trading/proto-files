syntax = "proto3";
package trading_platform_settings;
import "google/protobuf/empty.proto";

enum TradingPlatform {
  METATRADER_4 = 0;
  METATRADER_5 = 1;
}

enum TradingType {
  DEMO = 0;
  LIVE = 1;
}

message BrandSettings {
    Broker Broker = 1;
    Links Links = 2;
}

message Broker {
    string Name = 1;
    TradingType Type = 2;
    string CompatibleName = 3;
    string Caption = 4;
    bool Enabled = 5;
    string IconUrl = 6;
}

message Links {
    string Windows = 1;
    string Mac = 2;
    string Ios = 3;
    string Android = 4;
    string Web = 5;
}

message LiveAccountSettings {
    string PartitionKey = 1;
    string RowKey = 2;
}

message TechSettings {
    string Server = 1;
    string ManagerLogin = 2;
    string Password = 3;
    uint32 ReconnectTimeout = 4;
    string DefaultGroup = 5;
    string ArchiveGroup = 6;
    AccountsRanges AccountsRanges = 7;
}


message AccountsRanges {
    bool UseRange = 1;
    uint64 Min = 2;
    uint64 Max = 3;
}

message TradingPlatformSettingsModel {
    uint32 Id = 1;
    TradingPlatform TradingPlatformId = 2;
    BrandSettings BrandSettings = 3;
    LiveAccountSettings LiveAccountSettings = 4;
    TechSettings TechSettings = 5;
}

message GetAllRequest {
}

message GetAllResponse {
  repeated TradingPlatformSettingsModel Items = 1;
}

message GetRequest {
  uint32 Id = 1;
  TradingPlatform TradingPlatformId = 2;
}

message GetResponse {
  TradingPlatformSettingsModel Settings = 1;
}

message ResolveTradingPlatformIdRequest {
  string BrokerName = 1;
  TradingType TradingType = 2;
  TradingPlatform TradingPlatformId = 3;
}

message ResolveTradingPlatformIdResponse {
  uint32 Id = 1;
}

message SetRequest {
  TradingPlatformSettingsModel Item = 1;
}

message SetResponse {

}

service TradingPlatformSettingsGrpcService {
  rpc GetAll(GetAllRequest) returns (GetAllResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc ResolveTradingPlatformId(ResolveTradingPlatformIdRequest) returns (ResolveTradingPlatformIdResponse);
  rpc Set(SetRequest) returns (SetResponse);

  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
