syntax = "proto3";
package metatrader;
import "google/protobuf/empty.proto";

enum MetatraderAccountError {
    Ok = 0;
    InternalError = 1;
}

message CreateAccountRequest {
    string FullName = 1;
    string TradePassword = 2;      
    string ViewPassword = 3; 
    string ClientId = 4;  
    int64 Leverage = 5;  
    optional string Email = 6;
    optional string Country = 7;
    string ProcessId = 8;
}

message CreateAccountResponseBody {
    int64 MetatraderLogin = 1;
}

message CreateAccountResponse {
    oneof response {
        metatrader.CreateAccountResponseBody Body = 1;
        metatrader.MetatraderAccountError Error = 2;
    } 
}

message ChangeAccountTradePasswordRequest {
    int64 MetatraderLogin = 1;
    string NewPassword = 2;      
}

message ChangeAccountViewPasswordRequest {
    int64 MetatraderLogin = 1;
    string NewPassword = 2;      
}

message ChangeAccountPasswordResponse {
    bool Success = 1;
}

message DepositAccountRequest {
    int64 MetatraderLogin = 1;
    double Amount = 2;
    string Comment = 3;
    string ProcessId = 4;
}

message DepositAccountResponseBody {
    int64 MetatraderOrderId = 1;
}

message DepositAccountResponse {
    oneof response {
        metatrader.DepositAccountResponseBody Body = 1;
        metatrader.MetatraderAccountError Error = 2;
    } 
}

message WithdrawalAccountRequest{
    int64 MetatraderLogin = 1;
    double Amount = 2;
    string Comment = 3;
    string ProcessId = 4;
}

message WithdrawalAccountResponseBody {
    int64 MetatraderOrderId = 1;
}

message WithdrawalAccountResponse {
    oneof response {
        metatrader.WithdrawalAccountResponseBody Body = 1;
        metatrader.MetatraderAccountError Error = 2;
    } 
}

message GetAccountBalanceRequest {
    int64 MetatraderLogin = 1;
}

message GetAccountBalanceResponse {
    double Balance = 1;        // balance+credit
    double Equity = 2;         // equity
    double Margin = 3;         // margin requirements
    double MarginFree = 4;     // free margin
    double MarginLevel = 5;    // margin level
}

message CloseAccountRequest {
    int64 MetatraderLogin = 1;
    string ProcessId = 2;
}

message CloseAccountResponse {
    bool Success = 1;
}

message DisableAccountTradeRequest {
    int64 MetatraderLogin = 1;
    string ProcessId = 2;
}

message DisableAccountTraderResponse {
    bool Success = 1;
}


message GetAccountsBalanceRequest {

}

message BalanceModel {
    int64 MetatraderLogin = 1;
    //int64 Leverage = 2;        // user leverage
    double Balance = 3;        // balance+credit
    double Equity = 4;         // equity
    double Margin = 5;         // margin requirements
    double MarginFree = 6;     // free margin
    double MarginLevel = 7;    // margin level
}

message GetAccountHistory {
    int64 MetatraderLogin = 1;
}

enum TradeType { 
    Buy = 0; 
    Sell = 1; 
    BuyLimit = 2; 
    SellLimit = 3; 
    BuyStop = 4; 
    SellStop = 5; 
    Balance = 6; 
    Credit = 7; 
};

message AccountTradeModel {
    int64 Id = 1;            // order ticket
    int64 MetatraderLogin = 2;            // owner's login
    optional string Symbol = 3;       // security
    int64 Digits = 4;           // security precision
    TradeType Type = 5;              // trade command
    double Lots = 6;           // volume
    int64 OpenTime = 7;        // open time
    double OpenPrice = 8;       // open price
    double Sl = 9;
    double Tp = 10;            // stop loss & take profit
    optional int64 CloseTime = 11;       // close time
    double Fee = 12;             // commission
    double Swap = 13;            // order swaps
    double ClosePrice = 14;      // close price
    double Profit = 15;           // profit
    double Taxes = 16;            // taxes
    string Comment = 17;          // comment
    int64 Timestamp = 18;        // timestamp
}

message GetTimeRequest {
}

message GetTimeResponse {
    int64 ServerTime = 1;
    int64 GmtTimeZone = 2;
}

message CloseAccountPositionsRequest {
    int64 MetatraderLogin = 1;
    string ProcessId = 2;
}

message CloseAccountPositionsResponse {
    bool Success = 1;
}

service MetatraderAccountGrpcService {
    rpc CreateAccount(metatrader.CreateAccountRequest) 
    returns (metatrader.CreateAccountResponse);

    rpc ChangeAccountTradePassword(metatrader.ChangeAccountTradePasswordRequest) 
    returns (metatrader.ChangeAccountPasswordResponse);

    rpc ChangeAccountViewPassword(metatrader.ChangeAccountViewPasswordRequest) 
    returns (metatrader.ChangeAccountPasswordResponse);

    rpc DepositAccount(metatrader.DepositAccountRequest) 
    returns (metatrader.DepositAccountResponse);

    rpc WithdrawalAccount(metatrader.WithdrawalAccountRequest) 
    returns (metatrader.WithdrawalAccountResponse);

    rpc GetAccountBalance(metatrader.GetAccountBalanceRequest) 
    returns (metatrader.GetAccountBalanceResponse);

    rpc CloseAccount(metatrader.CloseAccountRequest) 
    returns (metatrader.CloseAccountResponse);

    rpc DisableAccountTrade(metatrader.DisableAccountTradeRequest) 
    returns (metatrader.DisableAccountTraderResponse);

    rpc GetAccountsBalance(metatrader.GetAccountsBalanceRequest) 
    returns (stream metatrader.BalanceModel);

    rpc GetAccountHistory(metatrader.GetAccountHistory) 
    returns (stream metatrader.AccountTradeModel);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);

    rpc GetTime(metatrader.GetTimeRequest) returns (metatrader.GetTimeResponse);

    rpc CloseAccountPositions(metatrader.CloseAccountPositionsRequest) 
    returns (metatrader.CloseAccountPositionsResponse);
}
