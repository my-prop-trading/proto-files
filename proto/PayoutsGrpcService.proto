syntax = "proto3";
package payouts;
import "google/protobuf/empty.proto";
import "MetatraderBroker.proto";
import "MetatraderPlatform.proto";

enum PayoutStatus {
    Pending = 0;
    Success = 1;
    Fail = 2;
}

enum PayoutType {
    RevenueShare = 0;
    Withdrawal = 1;
}

enum PaymentMethod {
    BankTransfer = 0;
    CryptoWithdrawal = 1;
}   

message BankTransferDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string Currency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string BeneficiaryFirstName = 4;
    string BeneficiaryLastName = 5;
    string Address = 6;
    string City = 7;
    string Country = 8;
    string PostalCode = 9;
    string AccountNumberOrIban = 10;
    string SwiftCode = 11;
    string BankName = 12;
}

message CryptoWithdrawalDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string FiatCurrency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string Cryptocurrency = 4;
    string Network = 5;
    string CryptoWalletAddress = 6;
}

message NotSelectedPaymentDetails {}

message PaymentDetails {
    oneof detail {
        payouts.NotSelectedPaymentDetails NotSelected = 1;
        payouts.BankTransferDetails BankTransfer = 2;
        payouts.CryptoWithdrawalDetails CryptoWithdrawal = 3;
    }
}

message PayoutRequest {
    string Id = 1;
    int64 CreatedAt = 2;
    int64 PaidAt = 3;
    string TxId = 4;
    string ClientId = 5;
    string TraderAccountId = 6;
    payouts.PaymentDetails PaymentDetails = 7;
    payouts.PayoutStatus Status = 8;
    metatrader_broker.BrokerModel Broker = 9;
    payouts.PayoutType PayoutType = 10;
    metatrader_platfom.TradingPlatformModel TradingPlatform = 11;
    double WithdrawalAmount = 12;
    string WithdrawalCurrency = 13;
    int64 ETag = 14;
}

message ProfitWidget {
    double withdrawn_profit = 1;
    
    double pending_profit = 2;
}


message GetByClientIdRequest {
    string ClientId = 1;

    int64 Offset = 2;

    int64 Limit = 3;
}

message GetByClientIdResponse {
    repeated payouts.PayoutRequest Payouts = 1;
}


message CreatePayoutRequest {
    string ClientId = 1;
    string TraderAccountId = 2;
    string ProcessId = 3;
    payouts.PaymentDetails PaymentDetails = 4;
    double WithdrawalAmount = 5;
    string WithdrawalCurrency = 6;
}

message CreatePayoutResponse {
    oneof response {
        payouts.PayoutRequest Payout = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}

message GetProfitWidgetRequest {
    string ClientId = 1;

    string TraderAccountId = 2;
}

message GetProfitWidgetResponse {
    oneof Response {
        payouts.ProfitWidget ProfitWidget = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}


message GetByFiltersRequest {
    optional string ClientId = 1;

    optional string TraderAccountId = 2;
    
    optional int64 FromDate = 3;

    optional int64 ToDate = 4;

    payouts.PayoutStatus Status = 5;

    optional string TransactionId = 6;
    
    optional payouts.PaymentMethod PaymentMethod = 7;

    int64 Offset = 20;
    
    int64 Limit = 21;
}
    
message GetByFiltersResponse {
    repeated payouts.PayoutRequest Payouts = 1;
}

enum PayoutsGrpcServiceError {
    INTERNAL = 0;
    NOT_FOUND = 1;
    UNAUTHORIZED = 2;
    NOT_ENOUGH_BALANCE = 3;
}

service PayoutsGrpcService {
    rpc GetByClientId(payouts.GetByClientIdRequest) returns (payouts.GetByClientIdResponse);

    rpc GetByFilters(payouts.GetByFiltersRequest) returns (payouts.GetByFiltersResponse);

    rpc CreatePayout(payouts.CreatePayoutRequest) returns (payouts.CreatePayoutResponse);

    rpc GetProfitWidget(payouts.GetProfitWidgetRequest) returns (payouts.GetProfitWidgetResponse);
    
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
