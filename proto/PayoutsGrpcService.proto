syntax = "proto3";
package payouts;
import "google/protobuf/empty.proto";

enum RevenueShareType {
    Timetable = 0;
    PerTransaction = 1;
}

enum PayoutStatus {
    Pending = 0;
    Success = 1;
    Fail = 2;
}

enum PayoutType {
    RevenueShare = 0;
    Withdrawal = 1;
    ExcessiveProfit = 2;
}

enum PaymentMethod {
    BankTransfer = 0;
    CryptoWithdrawal = 1;
    Both = 2;
}   

message BankTransferDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string Currency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string BeneficiaryFirstName = 4;
    string BeneficiaryLastName = 5;
    string Address = 6;
    string City = 7;
    string Country = 8;
    string PostalCode = 9;
    string AccountNumberOrIban = 10;
    string SwiftCode = 11;
    string BankName = 12;
    string RefundFeeCurrency = 13;
    double TotalProfitAmountToBeWithdrawn = 14;
}

message CryptoWithdrawalDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string FiatCurrency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string Cryptocurrency = 4;
    string Network = 5;
    string CryptoWalletAddress = 6;
    string RefundFeeCurrency = 7;
    double TotalProfitAmountToBeWithdrawn = 8;
}

message NotSelectedPaymentDetails {}

message PaymentDetails {
    oneof detail {
        payouts.NotSelectedPaymentDetails NotSelected = 1;
        payouts.BankTransferDetails BankTransfer = 2;
        payouts.CryptoWithdrawalDetails CryptoWithdrawal = 3;
    }
}

message PayoutRequest {
    string Id = 1;
    int64 CreatedAt = 2;
    int64 PaidAt = 3;
    string TxId = 4;
    string ClientId = 5;
    string TraderAccountId = 6;
    payouts.PaymentDetails PaymentDetails = 7;
    payouts.PayoutStatus Status = 8;
    int32 AccountType = 9;
    payouts.PayoutType PayoutType = 10;
    int32 PlatformId = 11;
    double WithdrawalAmount = 12;
    string WithdrawalCurrency = 13;
    int64 ETag = 14;
    double FeeAmount = 15;
    double TotalWithdrawalAmount = 16;
    double RevenueShare = 17;
}

message ProfitWidget {
    double withdrawn_profit = 1;
    
    double pending_profit = 2;

    double refund_fee_amount = 3;

    double current_profit = 4;

    double left_to_withdraw_in_profit_period = 5;

    double trader_account_revenue_share_percentage = 6;
}


message GetByClientIdRequest {
    string ClientId = 1;

    int64 Offset = 2;

    int64 Limit = 3;

    optional string TraderAccountId = 4;

    repeated payouts.PayoutType PayoutType = 5;
}

message GetByClientIdResponse {
    repeated payouts.PayoutRequest Payouts = 1;

    uint64 TotalCount = 2;
}


message CreatePayoutRequest {
    string ClientId = 1;
    string TraderAccountId = 2;
    string ProcessId = 3;
    payouts.PaymentDetails PaymentDetails = 4;
    double WithdrawalAmount = 5;
    string WithdrawalCurrency = 6;
}

message CreatePayoutResponse {
    oneof response {
        payouts.PayoutRequest Payout = 1;
        payouts.PayoutsGrpcServiceErrorWithMessage Error = 2;
    }
}

message GetProfitWidgetRequest {
    string ClientId = 1;

    string TraderAccountId = 2;
}

message GetProfitWidgetResponse {
    oneof Response {
        payouts.ProfitWidget ProfitWidget = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}

message GetByFiltersRequest {
    optional string ClientId = 1;

    optional string TraderAccountId = 2;
    
    optional int64 FromDate = 3;

    optional int64 ToDate = 4;

    repeated payouts.PayoutStatus Status = 5;

    optional string TransactionId = 6;
    
    optional payouts.PaymentMethod PaymentMethod = 7;

    repeated payouts.PayoutType Types = 8;

    int64 Offset = 20;
    
    int64 Limit = 21;
}
    
message GetByFiltersResponse {
    repeated payouts.PayoutRequest Payouts = 1;
}

message ApprovePayoutRequest {
    string PayoutId = 1;

    string ProcessId = 2;

    string Currency = 3;

    double Amount = 4;
}
    
message ApprovePayoutResponse {
     oneof response {
        payouts.PayoutRequest Payout = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}

message DeclinePayoutRequest {
    string PayoutId = 1;

    string ProcessId = 2;
}
    
message DeclinePayoutResponse {
     oneof response {
        payouts.PayoutRequest Payout = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}

message GetPayoutsStatisticRequest {
}

message GetPayoutsStatisticResponse {
    double ProfitToBeWithdrawn = 1;
    double TotalCurrentUsersProfit = 2;
    double TotallyWithdrawn = 3;
    double PendingPayouts = 4;
    double FeeToBeRefunded = 5;
}

message GetPayoutsStatisticForClientRequest {
    string ClientId = 1;
}

message GetPayoutsStatisticForClientResponse {
    repeated payouts.TraderAccountStatistic TraderAccountStatistic = 1;
}

message TraderAccountStatistic {
    string TraderAccountId = 1;

    double ProfitToBeWithdrawn = 2;
    double TotalCurrentUsersProfit = 3;
    double TotallyWithdrawn = 4;
}

message GetRevenueShareByFiltersRequest {
    optional string TraderAccountId = 1;
    
    optional int64 FromDate = 2;

    optional int64 ToDate = 3;

    optional string TransactionId = 4;

    optional string ClientId = 5;

    int64 Offset = 20;
    
    int64 Limit = 21;
}
    
message GetRevenueShareByFiltersResponse {
    repeated payouts.RevenueShareItem Payouts = 1;

    double TotalAmount = 2;
}

message GetExcessiveProfitByFiltersRequest {
    optional string TraderAccountId = 1;
    
    optional int64 FromDate = 2;

    optional int64 ToDate = 3;

    optional string TransactionId = 4;

    optional string ClientId = 5;

    int64 Offset = 20;
    
    int64 Limit = 21;
}
    
message GetExcessiveProfitByFiltersResponse {
    repeated payouts.PayoutRequest Payouts = 1;

    double TotalAmount = 2;
}

message RevenueShareItem {
    string Id = 1;
    int64 CreatedAt = 2;
    string TxId = 3;
    string ClientId = 4;
    string TraderAccountId = 5;
    string ProfitReleaseId = 6;
    double Amount = 7;
    string Currency = 8;
    double RevenueSharePercent = 9;
    payouts.RevenueShareType RevenueShareType = 10;
}

enum PayoutsGrpcServiceError {
    INTERNAL = 0;
    NOT_FOUND = 1;
    UNAUTHORIZED = 2;
    NOT_ENOUGH_BALANCE = 3;
    CANT_MAKE_DECISION = 4;
    BLOCKED = 5;
    USER_HAS_OPEN_POSITIONS = 6;
    LESS_THAN_MIN_VALUE = 7;
    EXCEEDS_MAX_VALUE = 8;
}

message PayoutsGrpcServiceErrorWithMessage {
    payouts.PayoutsGrpcServiceError Error = 1;
    string Message = 2;
}

message GetByIdRequest {
    string Id = 1;
}

message GetByIdResponse {
    oneof response {
        payouts.PayoutRequest Payout = 1;
        payouts.PayoutsGrpcServiceError Error = 2;
    }
}


enum MinMaxValueType {
    Min = 0;
    Max = 1;
}

message PayoutWithdrawalSetting {
    string Currency = 1;
    double Value = 2;
    payouts.PaymentMethod PaymentMethod = 3;
    payouts.MinMaxValueType Type = 4;
}


message RevenueShareSettings {
    bool PaymentLimitsEnabled = 1;

    double PaymentLimitsPercentage = 2;

    bool RevenueSharePerTransactionEnabled = 3;
}

message GetPayoutsWithdrawalSettingsRequest {
}

message GetPayoutsWithdrawalSettingsResponse {
    repeated payouts.PayoutWithdrawalSetting Settings = 1;
    payouts.RevenueShareSettings RevenueShareSettings = 2;
}

message SetPayoutsWithdrawalSettingsRequest {
    payouts.PayoutWithdrawalSetting Setting = 1;
}

message SetPayoutsWithdrawalSettingsResponse {
    payouts.PayoutWithdrawalSetting Setting = 1;
}

service PayoutsGrpcService {
    rpc GetById(payouts.GetByIdRequest) returns (payouts.GetByIdResponse);

    rpc GetByClientId(payouts.GetByClientIdRequest) returns (payouts.GetByClientIdResponse);

    rpc GetByFilters(payouts.GetByFiltersRequest) returns (payouts.GetByFiltersResponse);

    rpc GetRevenueShareByFilters(payouts.GetRevenueShareByFiltersRequest) returns (payouts.GetRevenueShareByFiltersResponse);

    rpc GetExcessiveProfitByFilters(payouts.GetExcessiveProfitByFiltersRequest) returns (payouts.GetExcessiveProfitByFiltersResponse);

    rpc CreatePayout(payouts.CreatePayoutRequest) returns (payouts.CreatePayoutResponse);

    rpc ApprovePayout(payouts.ApprovePayoutRequest) returns (payouts.ApprovePayoutResponse);

    rpc DeclinePayout(payouts.DeclinePayoutRequest) returns (payouts.DeclinePayoutResponse);

    rpc GetProfitWidget(payouts.GetProfitWidgetRequest) returns (payouts.GetProfitWidgetResponse);

    rpc GetPayoutsStatistic(payouts.GetPayoutsStatisticRequest) returns (payouts.GetPayoutsStatisticResponse);

    rpc GetPayoutsStatisticForClient(payouts.GetPayoutsStatisticForClientRequest) returns (payouts.GetPayoutsStatisticForClientResponse);

    rpc GetPayoutsWithdrawalSettings(payouts.GetPayoutsWithdrawalSettingsRequest) returns (payouts.GetPayoutsWithdrawalSettingsResponse);

    rpc SetPayoutsWithdrawalSettings(payouts.SetPayoutsWithdrawalSettingsRequest) returns (payouts.SetPayoutsWithdrawalSettingsResponse);
    
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
