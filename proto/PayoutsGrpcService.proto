syntax = "proto3";
package payouts;
import "google/protobuf/empty.proto";

enum BrokerModel {
    WELLTRADE = 0;
}

enum TradingPlatformModel {
    META_TRADER_4 = 0;
    META_TRADER_5 = 1;
}

enum PayoutStatus {
    Pending = 0;
    Success = 1;
    Fail = 2;
}

enum PayoutType {
    RevenueShare = 0;
    Withdrawal = 1;
}

enum TradingPlatform {
    MetaTrader4 = 0;
    MetaTrader5 = 1;
}

enum Broker {
    Welltrade = 0;
}

message BankTransferDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string Currency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string BeneficiaryFirstName = 4;
    string BeneficiaryLastName = 5;
    string Address = 6;
    string City = 7;
    string Country = 8;
    string PostalCode = 9;
    string AccountNumberOrIban = 10;
    string SwiftCode = 11;
    string BankName = 12;
}

message CryptoWithdrawalDetails {
    double ProfitAmountToBeWithdrawn = 1;
    string FiatCurrency = 2;
    double FeeAmountToBeWithdrawn = 3;
    string Cryptocurrency = 4;
    string Network = 5;
    string CryptoWalletAddress = 6;
}

message NotSelectedPaymentDetails {}

message PaymentDetails {
    oneof detail {
        payouts.NotSelectedPaymentDetails NotSelected = 1;
        payouts.BankTransferDetails BankTransfer = 2;
        payouts.CryptoWithdrawalDetails CryptoWithdrawal = 3;
    }
}

message PayoutRequest {
    string Id = 1;
    int64 CreatedAt = 2;
    int64 PaidAt = 3;
    string TxId = 4;
    string ClientId = 5;
    string TraderAccountId = 6;
    payouts.PaymentDetails PaymentDetails = 7;
    payouts.PayoutStatus Status = 8;
    payouts.Broker Broker = 9;
    payouts.PayoutType PayoutType = 10;
    payouts.TradingPlatform TradingPlatform = 11;
    double WithdrawalAmount = 12;
    string WithdrawalCurrency = 13;
    int64 ETag = 14;
}


message GetByClientIdRequest {
    string clientId = 1;

    int64 offset = 2;

    int64 limit = 3;
}

message GetByClientIdResponse {
    repeated payouts.PayoutRequest payouts = 1;
}

service PayoutsGrpcService {
    rpc GetByClientId(payouts.GetByClientIdRequest) returns (payouts.GetByClientIdResponse);
    
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
