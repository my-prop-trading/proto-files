syntax = "proto3";
package email_sender;
import "google/protobuf/empty.proto";

message EmailDestination{
    string ProcessId = 1;
    string Brand = 2;
    repeated string To = 3;
    repeated string Cc = 4;
}

message RegistrationConfirmationRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string Code = 3;
}

message ForgotPasswordRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string Code = 3;
}

message PasswordResetNotificationRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SuccesfullScenarioPhase1Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SuccesfullScenarioPhase2Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SuccesfullScenarioPhase3Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase1KycRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase1ContractRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase2KycRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase2ContractRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase3KycRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccesfullScenarioPhase3ContractRequiredRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendFailedScenarioPhase1Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendFailedScenarioPhase2Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendFailedScenarioPhase3Request {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendSuccessfulProofOfIdentityRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendRetryProofOfIdentityRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendFailedProofOfIdentityRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendSuccessfulProofOfAddressRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendRetryProofOfAddressRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}   

message SendFailedProofOfAddressRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendContractToClientRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string ContractId = 3;
}

message SendServiceDeniedDueToViolationTermsAndCondOnContractSigningRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string ContractId = 3;
}

message SendServiceDeniedOnAllAccountsDueToViolationTermsAndCondRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string ContractId = 3;
}

message SendServiceDeniedDueToViolationOfOurTermsAndCondRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendServiceDeniedDueToViolationOfOurTermsAndCondFutureProfitBlockedRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendServiceDeniedDueToViolationOfOurTermsAndCondFutureAndCurrentProfitBlockedRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderAccountId = 3;
}

message SendLiveAccountGrantedRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendLiveAccountLostRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
}

message SendPaymentReceivedRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderPackagesName = 3;
}

message SendInstantPaymentReceivedKycRequired {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderPackagesName = 3;
}

message SendInstantPaymentReceivedContractRequired {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderPackagesName = 3;
}

message SendPaymentFailedRequest{
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string TraderPackagesName = 3;
}

message SendPayoutSuccessRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string PayoutId = 3;
    string TraderAccountId = 4;
}

message SendPayoutDeclinedRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string PayoutId = 3;
    string TraderAccountId = 4;
}

message SendProfitSplitDayRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string ProfitReleaseId = 3;
    string TraderAccountId = 4;
    double amount = 5;
    string currency = 6;
}

message SendRevenueShareTakenRequest {
    email_sender.EmailDestination Destination = 1;
    string ClientId = 2;
    string ProfitReleaseId = 3;
    string TraderAccountId = 4;
    double amount = 5;
    string currency = 6;
}

message EmailSentResponse {
    
}

service EmailSenderGrpcService {
    rpc SendRegistrationConfirmation(email_sender.RegistrationConfirmationRequest) returns (email_sender.EmailSentResponse);

    rpc SendForgotPassword(email_sender.ForgotPasswordRequest) returns (email_sender.EmailSentResponse);

    rpc SendPasswordResetNotification(email_sender.PasswordResetNotificationRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase1(email_sender.SuccesfullScenarioPhase1Request) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase2(email_sender.SuccesfullScenarioPhase2Request) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase3(email_sender.SuccesfullScenarioPhase3Request) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase1KycRequired(email_sender.SendSuccesfullScenarioPhase1KycRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase1ContractRequired(email_sender.SendSuccesfullScenarioPhase1ContractRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase2KycRequired(email_sender.SendSuccesfullScenarioPhase2KycRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase2ContractRequired(email_sender.SendSuccesfullScenarioPhase2ContractRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase3KycRequired(email_sender.SendSuccesfullScenarioPhase3KycRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccesfullScenarioPhase3ContractRequired(email_sender.SendSuccesfullScenarioPhase3ContractRequiredRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccessfulProofOfIdentity(email_sender.SendSuccessfulProofOfIdentityRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendRetryProofOfIdentity(email_sender.SendRetryProofOfIdentityRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendFailedProofOfIdentity(email_sender.SendFailedProofOfIdentityRequest) returns (email_sender.EmailSentResponse);

    rpc SendSuccessfulProofOfAddress(email_sender.SendSuccessfulProofOfAddressRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendRetryProofOfAddress(email_sender.SendRetryProofOfAddressRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendFailedProofOfAddress(email_sender.SendFailedProofOfAddressRequest) returns (email_sender.EmailSentResponse);

    rpc SendContractToClient(email_sender.SendContractToClientRequest) returns (email_sender.EmailSentResponse);

    rpc SendServiceDeniedDueToViolationTermsAndCondOnContractSigning(
        email_sender.SendServiceDeniedDueToViolationTermsAndCondOnContractSigningRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendServiceDeniedOnAllAccountsDueToViolationTermsAndCond(
        email_sender.SendServiceDeniedOnAllAccountsDueToViolationTermsAndCondRequest) returns (email_sender.EmailSentResponse);

    rpc SendServiceDeniedDueToViolationOfOurTermsAndCond(
        email_sender.SendServiceDeniedDueToViolationOfOurTermsAndCondRequest) returns (email_sender.EmailSentResponse);
            
    rpc SendServiceDeniedDueToViolationOfOurTermsAndCondFutureProfitBlocked(
        email_sender.SendServiceDeniedDueToViolationOfOurTermsAndCondFutureProfitBlockedRequest) returns (email_sender.EmailSentResponse);

    rpc SendServiceDeniedDueToViolationOfOurTermsAndCondFutureAndCurrentProfitBlocked(
        email_sender.SendServiceDeniedDueToViolationOfOurTermsAndCondFutureAndCurrentProfitBlockedRequest) returns (email_sender.EmailSentResponse);

    rpc SendLiveAccountGranted(email_sender.SendLiveAccountGrantedRequest) returns (email_sender.EmailSentResponse);

    rpc SendLiveAccountLost(email_sender.SendLiveAccountLostRequest) returns (email_sender.EmailSentResponse);
    
    rpc SendPaymentReceived(email_sender.SendPaymentReceivedRequest) returns (email_sender.EmailSentResponse);

    rpc SendInstantPaymentReceivedKycRequired(email_sender.SendInstantPaymentReceivedKycRequired) returns (email_sender.EmailSentResponse);

    rpc SendInstantPaymentReceivedContractRequired(email_sender.SendInstantPaymentReceivedContractRequired) returns (email_sender.EmailSentResponse);

    rpc SendPaymentFailed(email_sender.SendPaymentFailedRequest) returns (email_sender.EmailSentResponse);

    rpc SendFailedScenarioPhase1(email_sender.SendFailedScenarioPhase1Request) returns (email_sender.EmailSentResponse);

    rpc SendFailedScenarioPhase2(email_sender.SendFailedScenarioPhase2Request) returns (email_sender.EmailSentResponse);

    rpc SendFailedScenarioPhase3(email_sender.SendFailedScenarioPhase3Request) returns (email_sender.EmailSentResponse);

    rpc SendPayoutSuccess(email_sender.SendPayoutSuccessRequest) returns (email_sender.EmailSentResponse);

    rpc SendPayoutDeclined(email_sender.SendPayoutDeclinedRequest) returns (email_sender.EmailSentResponse);

    rpc SendProfitSplitDay(email_sender.SendProfitSplitDayRequest) returns (email_sender.EmailSentResponse);

    rpc SendRevenueShareTaken(email_sender.SendRevenueShareTakenRequest) returns (email_sender.EmailSentResponse);
    
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
